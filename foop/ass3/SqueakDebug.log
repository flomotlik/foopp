MessageNotUnderstood: UndefinedObject>>!=15 July 2010 3:09:27.275 amVM: Mac OS - SmalltalkImage: Squeak4.1 [latest update: #9957]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/werner/Documents/ed/repos/foopp/foop/ass3Trusted Dir /foobar/tooBar/forSqueak/bogusUntrusted Dir /Users/werner/Library/Preferences/Squeak/Internet/My SqueakUndefinedObject(Object)>>doesNotUnderstand: #'!='	Receiver: nil	Arguments and temporary variables: 		aMessage: 	!= nil		exception: 	MessageNotUnderstood: UndefinedObject>>!=		resumeValue: 	nil	Receiver's instance variables: nilUndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadWriteStream 'temp _ SnakeFoopSnakeElement new.temp getNext...etc...		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelection		logFlag: 	true		methodNode: 	DoIt	temp := SnakeFoopSnakeElement new.	^ temp getNextElement != ...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(2272)")		value: 	nil		toLog: 	nil		itsSelection: 	nil		itsSelectionString: 	nil	Receiver's instance variables: 		sourceStream: 	a ReadWriteStream 'temp _ SnakeFoopSnakeElement new.temp getNext...etc...		requestor: 	a SmalltalkEditor		class: 	UndefinedObject		category: 	nil		context: 	nil		parser: 	a Parser[] in SmalltalkEditor(TextEditor)>>evaluateSelection	Receiver: a SmalltalkEditor	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		sensor: 	a KeyboardBuffer		morph: 	a TextMorphForEditView(870)		selectionShowing: 	false		model: 	a Workspace		paragraph: 	a MultiNewParagraph		pointBlock: 	a CharacterBlock with index 77 and rectangle 245@16 corner: 245@32...etc...		markBlock: 	a CharacterBlock with index 1 and character $t and rectangle 0@0 cor...etc...		beginTypeInBlock: 	nil		emphasisHere: 	{a TextColor code: Color black}		otherInterval: 	(66 to: 66)		lastParenLocation: 	nil		oldInterval: 	(35 to: 34)		styler: 	nil--- The full stack ---UndefinedObject(Object)>>doesNotUnderstand: #'!='UndefinedObject>>DoItCompiler>>evaluate:in:to:notifying:ifFail:logged:[] in SmalltalkEditor(TextEditor)>>evaluateSelection - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -BlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionSmalltalkEditor(TextEditor)>>doItSmalltalkEditor(TextEditor)>>doIt:SmalltalkEditor(TextEditor)>>dispatchOnCharacter:with:SmalltalkEditor(TextEditor)>>readKeyboard[] in TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:[] in PasteUpMorph>>becomeActiveDuring:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendKeyboardEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in Project class>>spawnNewProcess[] in BlockClosure>>newProcess