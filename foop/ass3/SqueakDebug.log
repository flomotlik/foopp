MessageNotUnderstood: PluggableTextMorphPlus>>makeProjectLink14 July 2010 1:30:12.529 amVM: Mac OS - SmalltalkImage: Squeak4.1 [latest update: #9957]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/werner/Documents/ed/repos/foopp/foop/ass3Trusted Dir /foobar/tooBar/forSqueak/bogusUntrusted Dir /Users/werner/Library/Preferences/Squeak/Internet/My SqueakPluggableTextMorphPlus(Object)>>doesNotUnderstand: #makeProjectLink	Receiver: a PluggableTextMorphPlus(1346)	Arguments and temporary variables: 		aMessage: 	makeProjectLink		exception: 	MessageNotUnderstood: PluggableTextMorphPlus>>makeProjectLink		resumeValue: 	nil	Receiver's instance variables: 		bounds: 	65@83 corner: 502@255		owner: 	a PluggableSystemWindow(248)		submorphs: 	{a ScrollBar(1778) . a TransformMorph(1513)}		fullBounds: 	65@83 corner: 502@255		color: 	Color white		extension: 	a MorphExtension (245) [locked]  [other:  (layoutFrame -> a LayoutFr...etc...		borderWidth: 	1		borderColor: 	Color lightGray		model: 	a Workspace		slotName: 	nil		open: 	false		scrollBar: 	a ScrollBar(1778)		scroller: 	a TransformMorph(1513)		retractableScrollBar: 	false		scrollBarOnLeft: 	false		getMenuSelector: 	#codePaneMenu:shifted:		getMenuTitleSelector: 	nil		scrollBarHidden: 	nil		hasFocus: 	true		hScrollBar: 	a ScrollBar(3674)		textMorph: 	a TextMorphForEditView(870)		getTextSelector: 	#contents		setTextSelector: 	#contents:notifying:		getSelectionSelector: 	#contentsSelection		hasUnacceptedEdits: 	true		askBeforeDiscardingEdits: 	true		selectionInterval: 	(1 to: 19)		hasEditingConflicts: 	false		getColorSelector: 	nil		acceptAction: 	nil		unstyledAcceptText: 	nil		styler: 	a SHTextStylerST80Workspace(StringHolder)>>perform:orSendTo:	Receiver: a Workspace	Arguments and temporary variables: 		selector: 	#makeProjectLink		otherTarget: 	a PluggableTextMorphPlus(1346)	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow(248) a PluggableTextMorph...etc...		contents: 	a Text for 'snake_ SnakeMorph new.'		bindings: 	a Dictionary('snake'->a SnakeGameMorph(174) )		acceptDroppedMorphs: 	false		acceptAction: 	nil		mustDeclareVariables: 	false		shouldStyle: 	nil[] in MenuItemMorph>>invokeWithEvent:	Receiver: a MenuItemMorph(3199)'make project link (P)'	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		bounds: 	316@153 corner: 459@169		owner: 	a MenuMorph(805)		submorphs: 	#()		fullBounds: 	316@153 corner: 459@169		color: 	Color black		extension: 	a MorphExtension (4041) [other:  (layoutProperties -> a LayoutProper...etc...		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)		emphasis: 	0		contents: 	'make project link (P)'		hasFocus: 	false		isEnabled: 	true		subMenu: 	nil		isSelected: 	false		target: 	a Workspace		selector: 	#perform:orSendTo:		arguments: 	{#makeProjectLink . a PluggableTextMorphPlus(1346)}		icon: 	Form(16x1x8)		lastMousePosition: 	nilBlockClosure>>ensure:	Receiver: [closure] in MenuItemMorph>>invokeWithEvent:	Arguments and temporary variables: 		aBlock: 	[closure] in CursorWithMask(Cursor)>>showWhile:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	MenuItemMorph>>invokeWithEvent:		startpc: 	132		numArgs: 	0--- The full stack ---PluggableTextMorphPlus(Object)>>doesNotUnderstand: #makeProjectLinkWorkspace(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:BlockClosure>>ensure: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MenuMorph(Morph)>>processEvent:MenuMorph>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:[] in PasteUpMorph>>becomeActiveDuring:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents...etc...