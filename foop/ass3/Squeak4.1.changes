'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 17 April 2010 at 5:22:05 pm'!----STARTUP----{17 April 2010 . 5:21:54 pm} as C:\Squeak\4.0\4.1-final\Squeak4.1.image!Smalltalk appendChangesTo: 'SqueakV41.sources'.!----QUIT----{17 April 2010 . 5:22:11 pm} Squeak4.1.image priorSource: 89!----STARTUP----{13 July 2010 . 3:48:20 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!----QUIT/NOSAVE----{13 July 2010 . 3:48:36 pm} Squeak4.1.image priorSource: 229!----STARTUP----{13 July 2010 . 3:55:19 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!Object subclass: #SnakeElement	instanceVariableNames: 'color, positionX, positionY, nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeElement methodsFor: 'no messages' stamp: 'WN 7/13/2010 18:18'!setPositionX:newPositionX andPositionY:newPositionY	"sets the position on the field for the current element"	positionX_newPositionX.	positionY_newPositionY.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:18'!setColor:newColor	"sets the color for the current Element"	color_newColor.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:19'!setNextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:20'!setPositionX:newPositionX	"sets the position on the field for the current element"	positionX_newPositionX.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:20'!setPositionY:newPositionY	"sets the Y position on the field for the current element"	positionY_newPositionY.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:20' prior: 33555820!setPositionX:newPositionX	"sets the X position on the field for the current element"	positionX_newPositionX.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 20:01'!getColor	"returns the color of this specific element"	^color! !Object subclass: #SnakeCoordinates	instanceVariableNames: 'x, y'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Smalltalk removeClassNamed: #SnakeElement!----QUIT/NOSAVE----{13 July 2010 . 9:43:18 pm} Squeak4.1.image priorSource: 229!----STARTUP----{13 July 2010 . 9:43:50 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 13 July 2010 at 8:04:33 pm'!Object subclass: #SnakeCoordinates	instanceVariableNames: 'x y'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #SnakeElement	instanceVariableNames: 'color positionX positionY nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 20:01'!getColor	"returns the color of this specific element"	^color! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:18'!setColor:newColor	"sets the color for the current Element"	color_newColor.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:19'!setNextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:20'!setPositionX:newPositionX	"sets the X position on the field for the current element"	positionX_newPositionX.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:18'!setPositionX:newPositionX andPositionY:newPositionY	"sets the position on the field for the current element"	positionX_newPositionX.	positionY_newPositionY.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:20'!setPositionY:newPositionY	"sets the Y position on the field for the current element"	positionY_newPositionY.! !----End fileIn of a stream----!Smalltalk removeClassNamed: #SnakeCoordinates!!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 23:46'!getNextElement	"returns the next element of this element"	^nextElement! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 23:47'!getPositionX	"returns the x position of the element"	^positionX! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:47'!getPositionY	"returns the y position of the element"	^positionY! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 23:50'!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	otherPositionX_otherElement getPositionX.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:50' prior: 33558874!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:50' prior: 33559160!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.		^returnValue! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:53' prior: 33559509!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.		otherPositionX==positionX ifTrue:[otherPositionY==positionY ifTrue:[returnValue_true]].		^returnValue! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:54' prior: 33559874!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.		otherPositionX==positionX ifTrue:[		otherPositionY==positionY ifTrue:[			returnValue_true]].		^returnValue! !Object subclass: #SnakeStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #SnakeCoordinates	instanceVariableNames: 'positionX, positionY'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #SnakeElement	instanceVariableNames: 'color coordniates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!SnakeElement removeSelector: #getPositionX!SnakeElement removeSelector: #getPositionY!SnakeElement removeSelector: #setPositionY:!SnakeElement removeSelector: #setPositionX:andPositionY:!SnakeElement removeSelector: #setPositionX:!!SnakeCoordinates methodsFor: 'nil' stamp: 'WN 7/14/2010 00:47'!getPositionX	"comment stating purpose of message"	^positionX! !!SnakeCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47' prior: 33561435!getPositionX	"returns the x position of the coordinates"	^positionX! !!SnakeCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47'!getPositionY	"returns the y position of the coordinates"	^positionY! !!SnakeCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:48'!setPositionY:newPositionY	"sets the y position of the coordinates"	positionY_newPositionY.! !!SnakeCoordinates methodsFor: 'nil' stamp: 'WN 7/14/2010 00:48'!setPositionX:newPositionX	"sets the x position of the coordinates"	positionX_newPositionX.! !!SnakeCoordinates methodsFor: 'nil' stamp: 'WN 7/14/2010 00:50'!equals:otherCoordinates	"checks if the given coordinates are the same as these coordinates"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherCoordinates getPositionX.	otherPositionY_otherCoordinates getPositionY.		otherPositionX==positionX ifTrue:[		otherPositionY==positionY ifTrue:[			returnValue_true]].		^returnValue! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:51' prior: 33560330!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	^coordniates equals:otherElement getCoordinates.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/14/2010 00:51'!getCoordinates	^coordniates! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:51' prior: 33562912!getCoordinates	"returns the coordinates of this element"	^coordniates! !Object subclass: #SnakeElement	instanceVariableNames: 'color coordinates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:52' prior: 33562698!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	^coordinates equals:otherElement getCoordinates.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:52' prior: 33563038!getCoordinates	"returns the coordinates of this element"	^coordinates! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/14/2010 00:53'!setCoordinates:newCoordinates	"sets the coordinates for the element"	coordinates_newCoordinates.! !!SnakeGameMorph commentStamp: '<historical>' prior: 0!Jaime Silvela  (jsilvela@nortelnetworks.com or jaime_silvela@yahoo.com)This is the toplevel class  for the snake game. All it does is package the SnakeMorph board, which does the real stuff, in an alignment morph with a score & controls panel.Game controls:   Left arrow -- Turn counterclockwise				Right arrow -- Turn clockwise!!SnakeMorph commentStamp: '<historical>' prior: 0!Jaime Silvela  (jsilvela@nortelnetworks.com or jaime_silvela@yahoo.com)21 September 2001This class contains the game proper.The lion's share of this class is in the step method.The class contains three instance variables:speed: a vector that keeps track of orientationcells: an ordered collection of square Morphs.grow: the number of cells to be added to the snake.step will move the first cell in the "cells" variable according to speed, then it will move through "cells", making each one take the position of the previous one. It also checks for collision of the snake with the walls or with itself. Finally, if the snake eats one of the numbers that pop up on the screen, it updates "grow" accordingly.!!SnakeGameMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/9/2001 16:01'!initialize	super initialize.	High = nil 		ifTrue: [ High _ 0].	self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: (board _ SnakeMorph new);		 addMorphBack: self makeControlPanel.	self startStepping! !!SnakeGameMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/9/2001 16:12'!makeControlPanel	^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'New game';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #newGame;			 target: board);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;				addMorphBack: (StringMorph contents: 'Score ');		 addMorphBack: (scoreMorph _ LedMorph new digits: 4;					 extent: 40 @ 15);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;				addMorphBack: (StringMorph contents: 'High ');		 addMorphBack: (highMorph _ LedMorph new digits: 4;					 extent: 40 @ 15);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer! !!SnakeGameMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/9/2001 15:59'!step	scoreMorph value: board length.	board length > High		ifTrue: [High _ board length].	highMorph value: High! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 23:42'!growCells: aNumber 	grow _ aNumber! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:36'!handlesKeyboard: evt	^ true! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:37'!handlesMouseOver: evt	^ true! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 14:51'!initialize	super initialize.	self extent: 300 @ 300.	self newGame! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 23:26'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 15:34'!length	^ cells size + grow! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:38'!mouseEnter: evt	evt hand newKeyboardFocus: self! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 15:41'!newGame	| cell |	self		submorphsDo: [:m | m delete].	cell _ Morph new extent: 10 @ 10;				 color: Color yellow.	cell position: self position." + self extent / 2."	self addMorph: cell.	cells _ OrderedCollection new.	cells addLast: cell.	speed _ 1 @ 0.	self growCells: 6.	self numberAtRandom.	self startStepping! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 14:40'!numberAtRandom	| value x y string stringMorph temp |	value _ 9 atRandom.	string _ String fromString: value printString.	stringMorph _ StringMorph contents: string.	stringMorph extent: 10 @ 10;		 color: Color yellow.	temp _ self extent - stringMorph extent.	x _ temp x atRandom - 1.	y _ temp y atRandom - 1.	stringMorph position: self position + (x @ y).	self		submorphsDo: [:m | (m bounds intersects: stringMorph bounds)				ifTrue: [self numberAtRandom.					^ self]].	self addMorph: stringMorph! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/21/2001 20:48'!step	| head lastPosition tmp cell |	head _ cells first.	lastPosition _ head position.	(self bounds			containsRect: (head bounds translateBy: speed * head width))		ifFalse: [self stopStepping.			^ self].	"Move the first cell according to the speed vector, then have the second cell take the place of the first one, the third one take the place of the second one etc."	head position: head position + (speed * head width).	2		to: cells size		do: [:index | 			tmp _ (cells at: index) position.			(cells at: index)				position: lastPosition.			lastPosition _ tmp].	"If the snake needs to grow, make a new cell and append to the snake"	grow > 0		ifTrue: [cell _ Morph new.			cell extent: 10 @ 10.			cell color: Color yellow.			cell position: lastPosition.			cells addLast: cell.			self addMorph: cell.			grow _ grow - 1].	2		to: cells size		do: [:index | (cells at: index) position = head position				ifTrue: [self stopStepping]].	self		submorphsDo: [:m | ((m isMemberOf: StringMorph)					and: [head bounds intersects: m bounds])				ifTrue: [self growCells: m contents asInteger.					m delete.					self numberAtRandom]]! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 23:48'!stepTime	^ 100! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:40'!turnLeft	speed _ speed y negated @ speed x! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:40'!turnRight	speed _ speed y @ speed x negated! !"SnakeGame"!snake_ SnakeGameMorph new.!snake_ SnakeGameMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.snake newGame.!snake_ SnakeMorph new.snake newGame.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph new.!SnakeMorph new.!SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.snake newGame.!snake_ SnakeMorph new.snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake_ SnakeGameMorph new.!snake_ SnakeGameMorph new.!snake_ SnakeGameMorph new.!SnakeGameMorph new.!SnakeGameMorph new.!SnakeGameMorph new.!SnakeGameMorph new.!'From Squeak3.8 of ''5 May 2005'' [latest update: #6665] on 3 July 2010 at 5:25:52 pm'!----End fileIn of a stream----!"Installed SnakeGame auto version 1".(Smalltalk at: #SMSqueakMap ifAbsent: []) ifNotNil:[	SMSqueakMap noteInstalledPackageWithId: '92cc0547-7eed-4f6c-b770-b68192cf6cd5' autoVersion: '1' asVersion atSeconds: 3456524098 number: 1]!SnakeGameMorph new.!SnakeGameMorph new.!----QUIT----{14 July 2010 . 1:38:44 am} Squeak4.1.image priorSource: 229!----STARTUP----{14 July 2010 . 1:42:47 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!Object subclass: #SnakeElement	instanceVariableNames: 'color coordinates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeStrategy methodsFor: 'no messages' stamp: 'WN 7/14/2010 02:13'!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |			^returnColor! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:17' prior: 33572388!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].].		^returnColor.! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:19' prior: 33572659!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].		^returnColor.! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:20' prior: 33573026!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:20' prior: 33573617!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !----QUIT----{14 July 2010 . 2:20:44 am} Squeak4.1.image priorSource: 17542!----STARTUP----{14 July 2010 . 11:11 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!Object subclass: #Snake	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #Snake	instanceVariableNames: 'snakes'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13'!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !SnakeStrategy removeSelector: #eatsSnakeColor:overColor:!!Snake methodsFor: 'nil' stamp: 'WN 7/14/2010 23:18'!initialize	"sets up a new snake game"	snakes_Array new:1.	! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:18' prior: 33576312!initialize	"sets up a new snake game and initializes all needed variables and the game board"	snakes_Array new:1.	! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:19' prior: 33576464!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |	playerSnake_SnakeElement new.	snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:19' prior: 33576672!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:20' prior: 33576956!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:21' prior: 33577273!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.		playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:23' prior: 33577667!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:01' prior: 33578109!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'nil' stamp: 'WN 7/15/2010 00:05'!generateGameArea	"this method generates the game area"! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:27' prior: 33578629!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.	"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:27' prior: 33579327!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !AlignmentMorph subclass: #SnakeBoardMorph	instanceVariableNames: 'snakes'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeBoardMorph methodsFor: 'nil' stamp: 'WN 7/15/2010 00:31'!generateGameArea	"this method generates the game area"! !!SnakeBoardMorph methodsFor: 'nil' stamp: 'WN 7/15/2010 00:31'!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !Smalltalk removeClassNamed: #Snake!Morph subclass: #FoopSnakeMorph	instanceVariableNames: 'speed cells grow'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeGame'!Smalltalk removeClassNamed: #FoopSnakeMorph!!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:58' prior: 33580784!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:58' prior: 33581635!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !Object subclass: #SnakeFoopRandomColor	instanceVariableNames: 'availableColors'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopRandomColor methodsFor: 'nil' stamp: 'WN 7/15/2010 01:01'!initialize	"initializes the random color generator for the snake game"	super initialize.	availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors put:Color blue.	availableColors put:Color green.! !test _ Array new:3.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test at:2.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test at:2.!!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:05' prior: 33583012!initialize	"initializes the random color generator for the snake game"	super initialize.	availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:06'!getRandomColor	"returns a random color from the available color pool"	| returnColor |	returnColor_Color red.	^returnColor	! !test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33584113!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33582261!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopElement new.	playerSnake setColor:SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.a!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:25' prior: 33585977!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake setColor:SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !AlignmentMorph subclass: #SnakeFoopMasterMorph	instanceVariableNames: 'snakes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopMasterMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:31'!generateGameArea	"this method generates the game area"! !!SnakeFoopMasterMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:31'!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake setColor:SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !AlignmentMorph subclass: #SnakeFoopMasterMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk removeClassNamed: #SnakeFoopMasterMorph!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'coordinates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #getColor!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:50' prior: 33587538!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake color SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:50' prior: 33590077!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:51' prior: 33590733!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:52' prior: 33591390!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 02:53'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 02:53'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeElement methodsFor: 'nil' stamp: 'WN 7/15/2010 03:02'!move:newPosition	"moves the element to the given position"! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:05' prior: 33592894!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement move:temp.! !temp _ SnakeFoopSnakeElement new.temp getNextElement.!temp _ SnakeFoopSnakeElement new.temp getNextElement.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:08' prior: 33593060!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement!!=nil ifTrue:[nextElement move:temp.].! !temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifFalse:['hallo'].!temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifFalse:['hallo'].!temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifTrue:['hallo'].!temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifTrue:['hallo'].!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:10' prior: 33593426!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:14' prior: 33580661!generateGameArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:15' prior: 33591992!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:18'!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:20' prior: 33594830!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:20' prior: 33594296!generateGameArea	"this method generates the game area"		| newGameArea |	^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:20' prior: 33595995!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: (self generateGameArea);		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33597233!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: (gameBoardMorph_ self generateGameArea);		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33597922!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:24' prior: 33596682!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:24' prior: 33599314!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color grey.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:26' prior: 33599552!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color darkGrey.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33599824!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33600100!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33595459!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !