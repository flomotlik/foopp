'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 17 April 2010 at 5:22:05 pm'!----STARTUP----{17 April 2010 . 5:21:54 pm} as C:\Squeak\4.0\4.1-final\Squeak4.1.image!Smalltalk appendChangesTo: 'SqueakV41.sources'.!----QUIT----{17 April 2010 . 5:22:11 pm} Squeak4.1.image priorSource: 89!----STARTUP----{13 July 2010 . 3:48:20 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!----QUIT/NOSAVE----{13 July 2010 . 3:48:36 pm} Squeak4.1.image priorSource: 229!----STARTUP----{13 July 2010 . 3:55:19 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!Object subclass: #SnakeElement	instanceVariableNames: 'color, positionX, positionY, nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeElement methodsFor: 'no messages' stamp: 'WN 7/13/2010 18:18'!setPositionX:newPositionX andPositionY:newPositionY	"sets the position on the field for the current element"	positionX_newPositionX.	positionY_newPositionY.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:18'!setColor:newColor	"sets the color for the current Element"	color_newColor.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:19'!setNextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:20'!setPositionX:newPositionX	"sets the position on the field for the current element"	positionX_newPositionX.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 18:20'!setPositionY:newPositionY	"sets the Y position on the field for the current element"	positionY_newPositionY.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:20' prior: 33555820!setPositionX:newPositionX	"sets the X position on the field for the current element"	positionX_newPositionX.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 20:01'!getColor	"returns the color of this specific element"	^color! !Object subclass: #SnakeCoordinates	instanceVariableNames: 'x, y'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Smalltalk removeClassNamed: #SnakeElement!----QUIT/NOSAVE----{13 July 2010 . 9:43:18 pm} Squeak4.1.image priorSource: 229!----STARTUP----{13 July 2010 . 9:43:50 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 13 July 2010 at 8:04:33 pm'!Object subclass: #SnakeCoordinates	instanceVariableNames: 'x y'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #SnakeElement	instanceVariableNames: 'color positionX positionY nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 20:01'!getColor	"returns the color of this specific element"	^color! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:18'!setColor:newColor	"sets the color for the current Element"	color_newColor.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:19'!setNextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:20'!setPositionX:newPositionX	"sets the X position on the field for the current element"	positionX_newPositionX.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:18'!setPositionX:newPositionX andPositionY:newPositionY	"sets the position on the field for the current element"	positionX_newPositionX.	positionY_newPositionY.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:20'!setPositionY:newPositionY	"sets the Y position on the field for the current element"	positionY_newPositionY.! !----End fileIn of a stream----!Smalltalk removeClassNamed: #SnakeCoordinates!!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 23:46'!getNextElement	"returns the next element of this element"	^nextElement! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 23:47'!getPositionX	"returns the x position of the element"	^positionX! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:47'!getPositionY	"returns the y position of the element"	^positionY! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/13/2010 23:50'!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	otherPositionX_otherElement getPositionX.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:50' prior: 33558874!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:50' prior: 33559160!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.		^returnValue! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:53' prior: 33559509!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.		otherPositionX==positionX ifTrue:[otherPositionY==positionY ifTrue:[returnValue_true]].		^returnValue! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:54' prior: 33559874!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherElement getPositionX.	otherPositionY_otherElement getPositionY.		otherPositionX==positionX ifTrue:[		otherPositionY==positionY ifTrue:[			returnValue_true]].		^returnValue! !Object subclass: #SnakeStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #SnakeCoordinates	instanceVariableNames: 'positionX, positionY'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #SnakeElement	instanceVariableNames: 'color coordniates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!SnakeElement removeSelector: #getPositionX!SnakeElement removeSelector: #getPositionY!SnakeElement removeSelector: #setPositionY:!SnakeElement removeSelector: #setPositionX:andPositionY:!SnakeElement removeSelector: #setPositionX:!!SnakeCoordinates methodsFor: 'nil' stamp: 'WN 7/14/2010 00:47'!getPositionX	"comment stating purpose of message"	^positionX! !!SnakeCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47' prior: 33561435!getPositionX	"returns the x position of the coordinates"	^positionX! !!SnakeCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47'!getPositionY	"returns the y position of the coordinates"	^positionY! !!SnakeCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:48'!setPositionY:newPositionY	"sets the y position of the coordinates"	positionY_newPositionY.! !!SnakeCoordinates methodsFor: 'nil' stamp: 'WN 7/14/2010 00:48'!setPositionX:newPositionX	"sets the x position of the coordinates"	positionX_newPositionX.! !!SnakeCoordinates methodsFor: 'nil' stamp: 'WN 7/14/2010 00:50'!equals:otherCoordinates	"checks if the given coordinates are the same as these coordinates"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherCoordinates getPositionX.	otherPositionY_otherCoordinates getPositionY.		otherPositionX==positionX ifTrue:[		otherPositionY==positionY ifTrue:[			returnValue_true]].		^returnValue! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:51' prior: 33560330!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	^coordniates equals:otherElement getCoordinates.! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/14/2010 00:51'!getCoordinates	^coordniates! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:51' prior: 33562912!getCoordinates	"returns the coordinates of this element"	^coordniates! !Object subclass: #SnakeElement	instanceVariableNames: 'color coordinates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:52' prior: 33562698!atSamePosition:otherElement	"checks if the given element is at the same position as this element"	^coordinates equals:otherElement getCoordinates.! !!SnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:52' prior: 33563038!getCoordinates	"returns the coordinates of this element"	^coordinates! !!SnakeElement methodsFor: 'nil' stamp: 'WN 7/14/2010 00:53'!setCoordinates:newCoordinates	"sets the coordinates for the element"	coordinates_newCoordinates.! !!SnakeGameMorph commentStamp: '<historical>' prior: 0!Jaime Silvela  (jsilvela@nortelnetworks.com or jaime_silvela@yahoo.com)This is the toplevel class  for the snake game. All it does is package the SnakeMorph board, which does the real stuff, in an alignment morph with a score & controls panel.Game controls:   Left arrow -- Turn counterclockwise				Right arrow -- Turn clockwise!!SnakeMorph commentStamp: '<historical>' prior: 0!Jaime Silvela  (jsilvela@nortelnetworks.com or jaime_silvela@yahoo.com)21 September 2001This class contains the game proper.The lion's share of this class is in the step method.The class contains three instance variables:speed: a vector that keeps track of orientationcells: an ordered collection of square Morphs.grow: the number of cells to be added to the snake.step will move the first cell in the "cells" variable according to speed, then it will move through "cells", making each one take the position of the previous one. It also checks for collision of the snake with the walls or with itself. Finally, if the snake eats one of the numbers that pop up on the screen, it updates "grow" accordingly.!!SnakeGameMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/9/2001 16:01'!initialize	super initialize.	High = nil 		ifTrue: [ High _ 0].	self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: (board _ SnakeMorph new);		 addMorphBack: self makeControlPanel.	self startStepping! !!SnakeGameMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/9/2001 16:12'!makeControlPanel	^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'New game';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #newGame;			 target: board);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;				addMorphBack: (StringMorph contents: 'Score ');		 addMorphBack: (scoreMorph _ LedMorph new digits: 4;					 extent: 40 @ 15);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;				addMorphBack: (StringMorph contents: 'High ');		 addMorphBack: (highMorph _ LedMorph new digits: 4;					 extent: 40 @ 15);		 addMorphBack: AlignmentMorph newVariableTransparentSpacer! !!SnakeGameMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/9/2001 15:59'!step	scoreMorph value: board length.	board length > High		ifTrue: [High _ board length].	highMorph value: High! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 23:42'!growCells: aNumber 	grow _ aNumber! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:36'!handlesKeyboard: evt	^ true! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:37'!handlesMouseOver: evt	^ true! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 14:51'!initialize	super initialize.	self extent: 300 @ 300.	self newGame! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 23:26'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 15:34'!length	^ cells size + grow! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:38'!mouseEnter: evt	evt hand newKeyboardFocus: self! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 15:41'!newGame	| cell |	self		submorphsDo: [:m | m delete].	cell _ Morph new extent: 10 @ 10;				 color: Color yellow.	cell position: self position." + self extent / 2."	self addMorph: cell.	cells _ OrderedCollection new.	cells addLast: cell.	speed _ 1 @ 0.	self growCells: 6.	self numberAtRandom.	self startStepping! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/1/2001 14:40'!numberAtRandom	| value x y string stringMorph temp |	value _ 9 atRandom.	string _ String fromString: value printString.	stringMorph _ StringMorph contents: string.	stringMorph extent: 10 @ 10;		 color: Color yellow.	temp _ self extent - stringMorph extent.	x _ temp x atRandom - 1.	y _ temp y atRandom - 1.	stringMorph position: self position + (x @ y).	self		submorphsDo: [:m | (m bounds intersects: stringMorph bounds)				ifTrue: [self numberAtRandom.					^ self]].	self addMorph: stringMorph! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 9/21/2001 20:48'!step	| head lastPosition tmp cell |	head _ cells first.	lastPosition _ head position.	(self bounds			containsRect: (head bounds translateBy: speed * head width))		ifFalse: [self stopStepping.			^ self].	"Move the first cell according to the speed vector, then have the second cell take the place of the first one, the third one take the place of the second one etc."	head position: head position + (speed * head width).	2		to: cells size		do: [:index | 			tmp _ (cells at: index) position.			(cells at: index)				position: lastPosition.			lastPosition _ tmp].	"If the snake needs to grow, make a new cell and append to the snake"	grow > 0		ifTrue: [cell _ Morph new.			cell extent: 10 @ 10.			cell color: Color yellow.			cell position: lastPosition.			cells addLast: cell.			self addMorph: cell.			grow _ grow - 1].	2		to: cells size		do: [:index | (cells at: index) position = head position				ifTrue: [self stopStepping]].	self		submorphsDo: [:m | ((m isMemberOf: StringMorph)					and: [head bounds intersects: m bounds])				ifTrue: [self growCells: m contents asInteger.					m delete.					self numberAtRandom]]! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 23:48'!stepTime	^ 100! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:40'!turnLeft	speed _ speed y negated @ speed x! !!SnakeMorph methodsFor: 'as yet unclassified' stamp: 'JSM 8/25/2001 22:40'!turnRight	speed _ speed y @ speed x negated! !"SnakeGame"!snake_ SnakeGameMorph new.!snake_ SnakeGameMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.snake newGame.!snake_ SnakeMorph new.snake newGame.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!snake_ SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph initialize.!SnakeMorph new.!SnakeMorph new.!SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.!snake_ SnakeMorph new.snake newGame.!snake_ SnakeMorph new.snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake newGame.!snake_ SnakeGameMorph new.!snake_ SnakeGameMorph new.!snake_ SnakeGameMorph new.!SnakeGameMorph new.!SnakeGameMorph new.!SnakeGameMorph new.!SnakeGameMorph new.!'From Squeak3.8 of ''5 May 2005'' [latest update: #6665] on 3 July 2010 at 5:25:52 pm'!----End fileIn of a stream----!"Installed SnakeGame auto version 1".(Smalltalk at: #SMSqueakMap ifAbsent: []) ifNotNil:[	SMSqueakMap noteInstalledPackageWithId: '92cc0547-7eed-4f6c-b770-b68192cf6cd5' autoVersion: '1' asVersion atSeconds: 3456524098 number: 1]!SnakeGameMorph new.!SnakeGameMorph new.!----QUIT----{14 July 2010 . 1:38:44 am} Squeak4.1.image priorSource: 229!----STARTUP----{14 July 2010 . 1:42:47 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!Object subclass: #SnakeElement	instanceVariableNames: 'color coordinates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeStrategy methodsFor: 'no messages' stamp: 'WN 7/14/2010 02:13'!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |			^returnColor! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:17' prior: 33572388!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].].		^returnColor.! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:19' prior: 33572659!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].		^returnColor.! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:20' prior: 33573026!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 02:20' prior: 33573617!eatsSnakeColor:colorSnake overColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !----QUIT----{14 July 2010 . 2:20:44 am} Squeak4.1.image priorSource: 17542!----STARTUP----{14 July 2010 . 11:11 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!Object subclass: #Snake	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!Object subclass: #Snake	instanceVariableNames: 'snakes'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13'!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !SnakeStrategy removeSelector: #eatsSnakeColor:overColor:!!Snake methodsFor: 'nil' stamp: 'WN 7/14/2010 23:18'!initialize	"sets up a new snake game"	snakes_Array new:1.	! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:18' prior: 33576312!initialize	"sets up a new snake game and initializes all needed variables and the game board"	snakes_Array new:1.	! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:19' prior: 33576464!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |	playerSnake_SnakeElement new.	snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:19' prior: 33576672!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:20' prior: 33576956!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:21' prior: 33577273!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.		playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:23' prior: 33577667!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:01' prior: 33578109!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |	"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'nil' stamp: 'WN 7/15/2010 00:05'!generateGameArea	"this method generates the game area"! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:27' prior: 33578629!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.	"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!Snake methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:27' prior: 33579327!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !AlignmentMorph subclass: #SnakeBoardMorph	instanceVariableNames: 'snakes'	classVariableNames: ''	poolDictionaries: ''	category: 'Snake'!!SnakeBoardMorph methodsFor: 'nil' stamp: 'WN 7/15/2010 00:31'!generateGameArea	"this method generates the game area"! !!SnakeBoardMorph methodsFor: 'nil' stamp: 'WN 7/15/2010 00:31'!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !Smalltalk removeClassNamed: #Snake!Morph subclass: #FoopSnakeMorph	instanceVariableNames: 'speed cells grow'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeGame'!Smalltalk removeClassNamed: #FoopSnakeMorph!!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:58' prior: 33580784!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 00:58' prior: 33581635!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopElement new.	playerSnake setColor:Color red.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !Object subclass: #SnakeFoopRandomColor	instanceVariableNames: 'availableColors'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopRandomColor methodsFor: 'nil' stamp: 'WN 7/15/2010 01:01'!initialize	"initializes the random color generator for the snake game"	super initialize.	availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors put:Color blue.	availableColors put:Color green.! !test _ Array new:3.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test at:2.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test at:2.!!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:05' prior: 33583012!initialize	"initializes the random color generator for the snake game"	super initialize.	availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:06'!getRandomColor	"returns a random color from the available color pool"	| returnColor |	returnColor_Color red.	^returnColor	! !test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!test _ Array new:3.test at:1 put:Color blue.test at:2 put:Color red.test at:3 put:Color green.test atWrap:(1 to: (test size)) atRandom.!!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33584113!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33582261!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopElement new.	playerSnake setColor:SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.a!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!test _ SnakeFoopRandomColor new getRandomColor.!!SnakeFoopBoardMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:25' prior: 33585977!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake setColor:SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !AlignmentMorph subclass: #SnakeFoopMasterMorph	instanceVariableNames: 'snakes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopMasterMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:31'!generateGameArea	"this method generates the game area"! !!SnakeFoopMasterMorph methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:31'!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake setColor:SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !AlignmentMorph subclass: #SnakeFoopMasterMorph	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk removeClassNamed: #SnakeFoopMasterMorph!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'coordinates nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #getColor!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:50' prior: 33587538!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake color SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:50' prior: 33590077!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake playerSnakeCoordinates |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnakeCoordinates_SnakeFoopCoordinates new.	playerSnakeCoordinates setPositionX:0.	playerSnakeCoordinates setPositionY:0.	playerSnake setCoordinates:playerSnakeCoordinates.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:51' prior: 33590733!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeElement new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:52' prior: 33591390!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 02:53'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 02:53'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeElement methodsFor: 'nil' stamp: 'WN 7/15/2010 03:02'!move:newPosition	"moves the element to the given position"! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:05' prior: 33592894!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement move:temp.! !temp _ SnakeFoopSnakeElement new.temp getNextElement.!temp _ SnakeFoopSnakeElement new.temp getNextElement.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:08' prior: 33593060!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement!!=nil ifTrue:[nextElement move:temp.].! !temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifFalse:['hallo'].!temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifFalse:['hallo'].!temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifTrue:['hallo'].!temp _ SnakeFoopSnakeElement new.temp getNextElement==nil ifTrue:['hallo'].!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:10' prior: 33593426!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:14' prior: 33580661!generateGameArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:15' prior: 33591992!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:18'!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:20' prior: 33594830!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:20' prior: 33594296!generateGameArea	"this method generates the game area"		| newGameArea |	^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:20' prior: 33595995!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: (self generateGameArea);		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33597233!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: (gameBoardMorph_ self generateGameArea);		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33597922!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:24' prior: 33596682!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:24' prior: 33599314!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color grey.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:26' prior: 33599552!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color darkGrey.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33599824!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33600100!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33595459!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'parts bin' stamp: 'WN 7/15/2010 03:38'!descriptionForPartsBin    ^ self partName:    'Foop Snake Game'        categories:     #('Demo')        documentation:  'The mighty foop snake game!!'! !!SnakeFoopGame methodsFor: 'parts bin' stamp: 'WN 7/15/2010 03:41' prior: 33601162!descriptionForPartsBin    ^ self partName:    'Foop Snake Game'        categories:     #('Games')        documentation:  'The mighty foop snake game!!'! !!SnakeFoopGame methodsFor: 'parts bin' stamp: 'WN 7/15/2010 03:49'!initializeToStandAlone	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initializeToStandAlone.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !SnakeFoopGame removeSelector: #initializeToStandAlone!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:55'!initializeToStandAlone	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initializeToStandAlone.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #initializeToStandAlone!temp _ SnakeFoopGame new.!temp _ SnakeFoopGame new.!temp _ SnakeFoopGame new.!SnakeFoopGame new.!SnakeFoopGame new.!SnakeFoopGame new.!SnakeFoopGame new.!game _ SnakeFoopGame new.game openInWorld.!game openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:06'!stepTime	^ 100! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 04:11'!initialize	| |	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:11' prior: 33603559!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:14' prior: 33598627!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33603942!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33604772!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| |		super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33605512!initialize	"sets up a new snake game and initializes all needed variables and the game board"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33605972!initialize	"sets up a new snake game and initializes the gameboard"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33606425!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:17'!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| temporary variable names playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:17' prior: 33607265!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:17' prior: 33607685!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:18' prior: 33606852!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.			snakes_OrderedCollection new.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:18' prior: 33608444!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.		snakes_OrderedCollection new.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:19' prior: 33600653!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);				 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:21' prior: 33608080!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:21' prior: 33610293!addPlayer1Snake	"adds a new snake for player 2"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:21' prior: 33610625!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:22' prior: 33610957!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		"snakes addLast:playerSnake."	gameBoardMorph addMorph: playerSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:22' prior: 33611289!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:23' prior: 33611656!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: 150 @ 150.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !SnakeFoopGame new openInWorld.!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph gameBoardSize'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:24' prior: 33608923!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.		snakes_OrderedCollection new.	gameBoardSize _ 300.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:24' prior: 33600376!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: gameBoardSize @ gameBoardSize.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:27' prior: 33613093!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:27' prior: 33613456!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:27' prior: 33612021!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !SnakeFoopGame new openInWorld.!Object subclass: #SnakeFoopRandomGenerator	instanceVariableNames: 'availableColors'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk removeClassNamed: #SnakeFoopRandomGenerator!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:29' prior: 33614098!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomGenerator new getRandomColor.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:29' prior: 33614735!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !Object subclass: #SnakeFoopRandomPosition	instanceVariableNames: 'grid'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopRandomPosition methodsFor: 'nil' stamp: 'WN 7/15/2010 04:30'!initialize	"comment stating purpose of message"	grid = 10.! !!SnakeFoopRandomPosition methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:30' prior: 33615645!initialize	"initializes the random position class and sets its variables"	super initialize.	grid = 10.! !!SnakeFoopRandomPosition methodsFor: 'nil' stamp: 'WN 7/15/2010 04:31'!getRandomPositionWithin:boardLenght	"returns a random position within the given bondary"	! !!SnakeFoopRandomPosition methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:32' prior: 33615996!getRandomPositionWithin:boardLenght	"returns a random position within the given bondary"	^(1 to: boardLenght) atRandom.! !!SnakeFoopRandomPosition methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:33' prior: 33616196!getRandomPositionWithin:boardLenght	"returns a random position within the given bondary"	^(((1 to: (boardLenght/10)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:34' prior: 33615131!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionX positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_SnakeFoopRandomPosition new getRandomPositionWithin.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !Smalltalk removeClassNamed: #SnakeFoopRandomPosition!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35'!getRandomPositionWithin	"returns a random position within the given bondary"	^(((1 to: (gameBoardSize/10)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35' prior: 33616658!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionX positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35' prior: 33617394!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionX positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	playerSnake position: (positionX @ positionY).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35'!getRandomPosition	"returns a random position within the given bondary"	^(((1 to: (gameBoardSize/10)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:36' prior: 33618293!getRandomPosition	"returns a random position determined by the boardsize"	^(((1 to: (gameBoardSize/10)) atRandom)*10).! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame removeSelector: #getRandomPositionWithin!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:53'!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (positionX @ positionY).		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:53' prior: 33609401!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.!SnakeFoopGame new getRandomPosition.! 280! 280! 280! 280! 280! 280! 280! 280!SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !SnakeFoopGame new getRandomPosition. !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:58' prior: 33619459!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:59' prior: 33621857!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:00' prior: 33618509!getRandomPosition	"returns a random position determined by the boardsize"	^(((1 to: ((gameBoardSize/10)-1)) atRandom)*10).! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:01' prior: 33622454!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (0 @ 0).	Transcript show: 'PosX: ',positionX,' posY:',positionY.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:02' prior: 33623290!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (0 @ 0).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:03' prior: 33623854!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition + self position.	positionY_self getRandomPosition + self position.	newCpuSnake position: (0 @ 0).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:03' prior: 33624445!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition + self position.	positionY_self getRandomPosition + self position.	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:03' prior: 33625068!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_(self getRandomPosition + self position).	positionY_(self getRandomPosition + self position).	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:07' prior: 33625707!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_(self getRandomPosition + self position x).	positionY_(self getRandomPosition + self position y).	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:07' prior: 33626317!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_(self getRandomPosition + self position x).	positionY_(self getRandomPosition + self position y).	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:08' prior: 33623034!getRandomPosition	"returns a random position determined by the boardsize"	| returnPoint |	^(((1 to: ((gameBoardSize/10)-1)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:09' prior: 33627578!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).	positionY _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).			^positionX @ positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:09' prior: 33627818!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).	positionY _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).			^positionX @ positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:10' prior: 33628167!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position y).			^positionX @ positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33626964!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	newCpuSnake position: self getRandomPosition.	Transcript show: 'Adding new CPU snake at: ', newCpuSnake position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33617840!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33629371!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33628515!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position y).			^(positionX @ positionY)! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:13' prior: 33630171!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position y).			^Point new setX:positionX setY:positionY! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 05:19'!step	"moves all registered snakes"	| temp  |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		temp move:((temp position)+temp speed).		].! !AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph gameBoardSize player1Snake'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:23' prior: 33629759!addPlayer1Snake	"adds a new snake for player 1"	player1Snake_SnakeFoopSnakeHead new.	player1Snake color: SnakeFoopRandomColor new getRandomColor.	player1Snake position: self getRandomPosition.		snakes addLast:player1Snake.	gameBoardMorph addMorph: player1Snake.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:24' prior: 33631439!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifFalse:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:24' prior: 33631839!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:24' prior: 33632277!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.		player1Snake speed: Point new setX:10 setY:0.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:25' prior: 33632714!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.		player1Snake speed: (Point new setX:10 setY:0).			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:26' prior: 33633199!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.		player1Snake speed: (Point new setX:10 setY:0).			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:27' prior: 33633686!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:28' prior: 33603739!initialize	super initialize.	self extent: 10 @ 10.	self speed: Point new setX:0 setY:0.	self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:28' prior: 33634582!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:30' prior: 33631000!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed..		temp move:newPosition.		].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:31' prior: 33635064!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:32'!speed	"returns the current speed of the snake head"	^speed! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:32' prior: 33635387!step	"moves all registered snakes"	| temp |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		temp move:(temp position + temp speed).		].! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:33' prior: 33634828!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:10 setY:0.	self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:33' prior: 33636098!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:00 setY:0.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:33' prior: 33636340!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:35' prior: 33635841!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed		temp move:newPosition.		].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:35' prior: 33636752!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:36' prior: 33636549!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:10 setY:0.	self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:36' prior: 33637367!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:37' prior: 33637040!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		Transcript show newPosition.		Transcript cr.		temp move:newPosition.		].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:37' prior: 33637812!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		Transcript show: newPosition.		Transcript cr.		temp move:newPosition.		].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:38' prior: 33638182!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		newPosition>(self position + gameBoardSize) ifTrue:[ Transcript show: newPosition.		Transcript cr.].		temp move:newPosition.		].! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:38' prior: 33637609!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:10 setY:0.	self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:39' prior: 33638951!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:39' prior: 33638553!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].! !AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph gameBoardSize player1Snake player2Snake'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40'!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHead new.		player2Snake color: SnakeFoopRandomColor new getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40'!nextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !SnakeFoopSnakeElement removeSelector: #setNextElement:!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40'!nextElement	"returns the next element of this element"	^nextElement! !SnakeFoopSnakeElement removeSelector: #getNextElement!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadCpu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHeadPlayer2 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !!SnakeFoopSnakeHeadPlayer2 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !SnakeFoopSnakeHead removeSelector: #handlesKeyboard:!SnakeFoopSnakeHead removeSelector: #keyStroke:!SnakeFoopSnakeHead removeSelector: #speed!!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46'!speed	^speed! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46'!speed	^speed! !SnakeFoopSnakeHeadPlayer1 removeSelector: #speed!!SnakeFoopSnakeHeadCpu methodsFor: 'nil' stamp: 'WN 7/15/2010 05:47'!speed	Transcript show:'cpu speed called'.	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33634173!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33639868!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer2 new.		player2Snake color: SnakeFoopRandomColor new getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33628903!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	newCpuSnake position: self getRandomPosition.	Transcript show: 'Adding new CPU snake at: ', newCpuSnake position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:53' prior: 33642219!speed	| tempDirections |	tempDirections_Array new:4.	tempDirections at:1 put: Point new setX:10 setY:0.	tempDirections at:2 put: Point new setX:-10 setY:0.	tempDirections at:3 put: Point new setX:0 setY:10.	tempDirections at:4 put: Point new setX:0 setY:-10.				speed  tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:53' prior: 33643701!speed	| tempDirections |	tempDirections_Array new:4.	tempDirections at:1 put: (Point new setX:10 setY:0).	tempDirections at:2 put: (Point new setX:-10 setY:0).	tempDirections at:3 put: (Point new setX:0 setY:10).	tempDirections at:4 put: (Point new setX:0 setY:-10).				speed  tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:56' prior: 33644186!speed	| tempDirections left right up down|	left_(Point new setX:-10 setY:0).	right_(Point new setX:10 setY:0).	up_(Point new setX:0 setY:10).	down_(Point new setX:0 setY:-10).		tempDirections_Array new:4.	tempDirections at:1 put: left.	tempDirections at:2 put: right.	tempDirections at:3 put: up.	tempDirections at:4 put: down.				speed  tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:56' prior: 33644679!speed	| tempDirections left right up down|	left_(Point new setX:-10 setY:0).	right_(Point new setX:10 setY:0).	up_(Point new setX:0 setY:10).	down_(Point new setX:0 setY:-10).		tempDirections_Array new:4.	tempDirections at:1 put: left.	tempDirections at:2 put: right.	tempDirections at:3 put: up.	tempDirections at:4 put: down.				speed_ tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'nil' stamp: 'WN 7/15/2010 05:58'!stepTime	^ 100! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:58' prior: 33645765!stepTime	^ 500! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:59'!step	"changes the direction for the cpu snake"	| tempDirections left right up down|	left_(Point new setX:-10 setY:0).	right_(Point new setX:10 setY:0).	up_(Point new setX:0 setY:10).	down_(Point new setX:0 setY:-10).		tempDirections_Array new:4.	tempDirections at:1 put: left.	tempDirections at:2 put: right.	tempDirections at:3 put: up.	tempDirections at:4 put: down.				speed_ tempDirections atWrap:(1 to: (tempDirections size)) atRandom.! !----STARTUP----{15 July 2010 . 6:14:06 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 15 July 2010 at 4:06:01 am'!Smalltalk renameClassNamed: #SnakeCoordinates as: #SnakeFoopCoordinates!Object subclass: #SnakeFoopCoordinates	instanceVariableNames: 'positionX positionY'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeBoardMorph as: #SnakeFoopGame!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Object subclass: #SnakeFoopRandomColor	instanceVariableNames: 'availableColors'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeElement as: #SnakeFoopSnakeElement!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeStrategy as: #SnakeFoopStrategy!Object subclass: #SnakeFoopStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:50' prior: 33562233!equals:otherCoordinates	"checks if the given coordinates are the same as these coordinates"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherCoordinates getPositionX.	otherPositionY_otherCoordinates getPositionY.		otherPositionX==positionX ifTrue:[		otherPositionY==positionY ifTrue:[			returnValue_true]].		^returnValue! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47' prior: 33561599!getPositionX	"returns the x position of the coordinates"	^positionX! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47' prior: 33561754!getPositionY	"returns the y position of the coordinates"	^positionY! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:48' prior: 33562071!setPositionX:newPositionX	"sets the x position of the coordinates"	positionX_newPositionX.! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:48' prior: 33561909!setPositionY:newPositionY	"sets the y position of the coordinates"	positionY_newPositionY.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29'!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29'!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21'!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11'!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:05'!initialize	"initializes the random color generator for the snake game"	super initialize.	availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:46' prior: 33558458!getNextElement	"returns the next element of this element"	^nextElement! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:10'!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:19' prior: 33557580!setNextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:53'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:53'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13'!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !SnakeFoopStrategy removeSelector: #eatsSnakeColor:overColor:!SnakeFoopStrategy removeSelector: #eatsSnakeColor:overColor:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getPositionX!SnakeFoopSnakeElement removeSelector: #getPositionY!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setPositionX:!SnakeFoopSnakeElement removeSelector: #setPositionX:andPositionY:!SnakeFoopSnakeElement removeSelector: #setPositionY:!SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #initializeToStandAlone!----End fileIn of a stream----!----QUIT/NOSAVE----{15 July 2010 . 6:17:36 am} Squeak4.1.image priorSource: 20591!----STARTUP----{15 July 2010 . 6:17:42 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 15 July 2010 at 4:06:01 am'!Smalltalk renameClassNamed: #SnakeCoordinates as: #SnakeFoopCoordinates!Object subclass: #SnakeFoopCoordinates	instanceVariableNames: 'positionX positionY'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeBoardMorph as: #SnakeFoopGame!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Object subclass: #SnakeFoopRandomColor	instanceVariableNames: 'availableColors'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeElement as: #SnakeFoopSnakeElement!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeStrategy as: #SnakeFoopStrategy!Object subclass: #SnakeFoopStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:50' prior: 33562233!equals:otherCoordinates	"checks if the given coordinates are the same as these coordinates"	| otherPositionX otherPositionY returnValue |	returnValue_false.	otherPositionX_otherCoordinates getPositionX.	otherPositionY_otherCoordinates getPositionY.		otherPositionX==positionX ifTrue:[		otherPositionY==positionY ifTrue:[			returnValue_true]].		^returnValue! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47' prior: 33561599!getPositionX	"returns the x position of the coordinates"	^positionX! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:47' prior: 33561754!getPositionY	"returns the y position of the coordinates"	^positionY! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:48' prior: 33562071!setPositionX:newPositionX	"sets the x position of the coordinates"	positionX_newPositionX.! !!SnakeFoopCoordinates methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 00:48' prior: 33561909!setPositionY:newPositionY	"sets the y position of the coordinates"	positionY_newPositionY.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29'!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29'!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21'!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11'!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:05'!initialize	"initializes the random color generator for the snake game"	super initialize.	availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 23:46' prior: 33558458!getNextElement	"returns the next element of this element"	^nextElement! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:10'!move:newPosition	"moves the element to the given position"		| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/13/2010 18:19' prior: 33557580!setNextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:53'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 02:53'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13'!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !SnakeFoopStrategy removeSelector: #eatsSnakeColor:overColor:!SnakeFoopStrategy removeSelector: #eatsSnakeColor:overColor:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getPositionX!SnakeFoopSnakeElement removeSelector: #getPositionY!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setPositionX:!SnakeFoopSnakeElement removeSelector: #setPositionX:andPositionY:!SnakeFoopSnakeElement removeSelector: #setPositionY:!SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #initializeToStandAlone!----End fileIn of a stream----!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33657462!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33658140!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33659699!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33656943!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33661558!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33662252!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33662493!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33663253!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33663788!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33664482!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33664723!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33665483!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 04:11'!initialize	| |	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46'!speed	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47'!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33666018!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33666712!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33666953!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33667713!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 04:11' prior: 33668221!initialize	| |	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46' prior: 33668369!speed	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33668464!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33668875!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33669569!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33669810!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33670570!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:06'!stepTime	^ 100! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:11' prior: 33671094!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:14' prior: 33671780!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33674266!initialize	"sets up a new snake game and initializes all needed variables and the game board"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:17' prior: 33671369!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| temporary variable names playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46' prior: 33671258!speed	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33675434!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33674997!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33672474!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33672715!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33673475!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:06' prior: 33673978!stepTime	^ 100! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:11' prior: 33674096!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:14' prior: 33676365!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33678867!initialize	"sets up a new snake game and initializes all needed variables and the game board"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:17' prior: 33675954!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| temporary variable names playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46' prior: 33675843!speed	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33680035!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33679598!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33677059!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33677300!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33678060!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:06' prior: 33678579!stepTime	^ 100! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 04:11' prior: 33678697!initialize	| |	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:11' prior: 33683282!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:14' prior: 33680966!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33683632!initialize	"sets up a new snake game and initializes all needed variables and the game board"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:17' prior: 33680555!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| temporary variable names playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33684800!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46' prior: 33680444!speed	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33685220!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33684363!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33681660!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33681901!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33682661!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:06' prior: 33683180!stepTime	^ 100! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 04:11' prior: 33683462!initialize	| |	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:11' prior: 33688426!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:14' prior: 33686110!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33688776!initialize	"sets up a new snake game and initializes all needed variables and the game board"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:17' prior: 33685699!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| temporary variable names playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33689944!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46' prior: 33685588!speed	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33690364!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:21' prior: 33689507!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.	self startStepping! !!SnakeFoopRandomColor methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 01:11' prior: 33686804!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.	! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33687045!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 03:29' prior: 33687805!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33690843!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33693484!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33693863!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:11' prior: 33688606!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33691254!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:17' prior: 33694251!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| temporary variable names playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:21' prior: 33695529!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33695949!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33696281!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:06' prior: 33688324!stepTime	^ 100! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 04:11' prior: 33694635!initialize	| |	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:11' prior: 33697134!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:14' prior: 33694805!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_Array new:1.	snakes at:1 put:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33697484!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| playerSnake |		super initialize.		"initialize the first snake (which is the first players snake)"	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.		gameBoardMorph addMorph: playerSnake.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33698215!initialize	"sets up a new snake game and initializes all needed variables and the game board"	| |		super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33698955!initialize	"sets up a new snake game and initializes all needed variables and the game board"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33699415!initialize	"sets up a new snake game and initializes the gameboard"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:16' prior: 33699868!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 04:17' prior: 33696669!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| temporary variable names playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:17' prior: 33700724!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes_OrderedCollection new.	snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:17' prior: 33701144!addPlayer1Snake	"initialize the first snake (which is the first players snake)"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:18' prior: 33700295!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.			snakes_OrderedCollection new.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:18' prior: 33701903!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.		snakes_OrderedCollection new.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:19' prior: 33692949!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);				 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:21' prior: 33701539!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:21' prior: 33703653!addPlayer1Snake	"adds a new snake for player 2"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:21' prior: 33703985!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:22' prior: 33704317!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		"snakes addLast:playerSnake."	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:22' prior: 33704649!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:23' prior: 33704983!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: 150 @ 150.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:24' prior: 33702382!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.		snakes_OrderedCollection new.	gameBoardSize _ 300.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:24' prior: 33656682!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: gameBoardSize @ gameBoardSize.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:27' prior: 33706181!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: 300 @ 300.	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:27' prior: 33706478!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:27' prior: 33705315!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !Smalltalk removeClassNamed: #SnakeFoopRandomGenerator!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:29' prior: 33707054!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomGenerator new getRandomColor.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:29' prior: 33707502!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopRandomPosition methodsFor: 'nil' stamp: 'WN 7/15/2010 04:30'!initialize	"comment stating purpose of message"	grid = 10.! !!SnakeFoopRandomPosition methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:30' prior: 33708268!initialize	"initializes the random position class and sets its variables"	super initialize.	grid = 10.! !!SnakeFoopRandomPosition methodsFor: 'nil' stamp: 'WN 7/15/2010 04:31'!getRandomPositionWithin:boardLenght	"returns a random position within the given bondary"	! !!SnakeFoopRandomPosition methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:32' prior: 33708619!getRandomPositionWithin:boardLenght	"returns a random position within the given bondary"	^(1 to: boardLenght) atRandom.! !!SnakeFoopRandomPosition methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:33' prior: 33708819!getRandomPositionWithin:boardLenght	"returns a random position within the given bondary"	^(((1 to: (boardLenght/10)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:34' prior: 33707898!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionX positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_SnakeFoopRandomPosition new getRandomPositionWithin.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !Smalltalk removeClassNamed: #SnakeFoopRandomPosition!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35'!getRandomPositionWithin	"returns a random position within the given bondary"	^(((1 to: (gameBoardSize/10)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35' prior: 33709281!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionX positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	playerSnake position: (gameBoardSize/2 @ gameBoardSize/2).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35' prior: 33710017!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionX positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	playerSnake position: (positionX @ positionY).		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:35'!getRandomPosition	"returns a random position within the given bondary"	^(((1 to: (gameBoardSize/10)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:36' prior: 33710916!getRandomPosition	"returns a random position determined by the boardsize"	^(((1 to: (gameBoardSize/10)) atRandom)*10).! !SnakeFoopGame removeSelector: #getRandomPositionWithin!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:53'!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (positionX @ positionY).		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:53' prior: 33702860!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:58' prior: 33711392!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 04:59' prior: 33712918!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:00' prior: 33711132!getRandomPosition	"returns a random position determined by the boardsize"	^(((1 to: ((gameBoardSize/10)-1)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:01' prior: 33713449!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (0 @ 0).	Transcript show: 'PosX: ',positionX,' posY:',positionY.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:02' prior: 33714219!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition.	positionY_self getRandomPosition.	newCpuSnake position: (0 @ 0).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:03' prior: 33714750!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition + self position.	positionY_self getRandomPosition + self position.	newCpuSnake position: (0 @ 0).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:03' prior: 33715308!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_self getRandomPosition + self position.	positionY_self getRandomPosition + self position.	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:03' prior: 33715898!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_(self getRandomPosition + self position).	positionY_(self getRandomPosition + self position).	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:07' prior: 33716504!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_(self getRandomPosition + self position x).	positionY_(self getRandomPosition + self position y).	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:07' prior: 33717114!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake positionX positionY|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	positionX_(self getRandomPosition + self position x).	positionY_(self getRandomPosition + self position y).	newCpuSnake position: (positionX @ positionY).	Transcript show: 'PosX: ',positionX,' posY:',positionY,' framePos:',self position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:08' prior: 33713996!getRandomPosition	"returns a random position determined by the boardsize"	| returnPoint |	^(((1 to: ((gameBoardSize/10)-1)) atRandom)*10).! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:09' prior: 33718342!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).	positionY _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).			^positionX @ positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:09' prior: 33718582!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).	positionY _ (((1 to: ((gameBoardSize/10)-1)) atRandom)*10).			^positionX @ positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:10' prior: 33718931!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position y).			^positionX @ positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33717728!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHead new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	newCpuSnake position: self getRandomPosition.	Transcript show: 'Adding new CPU snake at: ', newCpuSnake position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33710463!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake positionY|	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33720135!addPlayer1Snake	"adds a new snake for player 1"	| playerSnake |	playerSnake_SnakeFoopSnakeHead new.	playerSnake color: SnakeFoopRandomColor new getRandomColor.	playerSnake position: self getRandomPosition.		snakes addLast:playerSnake.	gameBoardMorph addMorph: playerSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:11' prior: 33719279!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position y).			^(positionX @ positionY)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:13' prior: 33720902!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + self position y).			^Point new setX:positionX setY:positionY! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 05:19'!step	"moves all registered snakes"	| temp  |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		temp move:((temp position)+temp speed).		].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:23' prior: 33720523!addPlayer1Snake	"adds a new snake for player 1"	player1Snake_SnakeFoopSnakeHead new.	player1Snake color: SnakeFoopRandomColor new getRandomColor.	player1Snake position: self getRandomPosition.		snakes addLast:player1Snake.	gameBoardMorph addMorph: player1Snake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:24' prior: 33721918!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifFalse:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:24' prior: 33722285!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:24' prior: 33722690!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.		player1Snake speed: Point new setX:10 setY:0.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:25' prior: 33723094!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.		player1Snake speed: (Point new setX:10 setY:0).			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:26' prior: 33723546!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.		player1Snake speed: (Point new setX:10 setY:0).			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:27' prior: 33724000!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHead new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:28' prior: 33697314!initialize	super initialize.	self extent: 10 @ 10.	self speed: Point new setX:0 setY:0.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:28' prior: 33724863!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:30' prior: 33721665!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed..		temp move:newPosition.		].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:31' prior: 33725279!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:32' prior: 33690732!speed	"returns the current speed of the snake head"	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:32' prior: 33725569!step	"moves all registered snakes"	| temp |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		temp move:(temp position + temp speed).		].! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:33' prior: 33725076!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:10 setY:0.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:33' prior: 33726263!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:00 setY:0.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:33' prior: 33726472!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:35' prior: 33726006!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed		temp move:newPosition.		].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:35' prior: 33726884!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:36' prior: 33726681!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:10 setY:0.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:36' prior: 33727466!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:37' prior: 33727172!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		Transcript show newPosition.		Transcript cr.		temp move:newPosition.		].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:37' prior: 33727878!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		Transcript show: newPosition.		Transcript cr.		temp move:newPosition.		].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:38' prior: 33728215!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		newPosition>(self position + gameBoardSize) ifTrue:[ Transcript show: newPosition.		Transcript cr.].		temp move:newPosition.		].! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:38' prior: 33727675!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:10 setY:0.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:39' prior: 33728951!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:39' prior: 33728553!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40'!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHead new.		player2Snake color: SnakeFoopRandomColor new getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40'!nextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !SnakeFoopSnakeElement removeSelector: #setNextElement:!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40'!nextElement	"returns the next element of this element"	^nextElement! !SnakeFoopSnakeElement removeSelector: #getNextElement!!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHeadPlayer2 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !!SnakeFoopSnakeHeadPlayer2 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:45'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self turnRight ].	keyValue = 29 ifTrue: [ self turnLeft]! !SnakeFoopSnakeHead removeSelector: #handlesKeyboard:!SnakeFoopSnakeHead removeSelector: #keyStroke:!SnakeFoopSnakeHead removeSelector: #speed!!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46'!speed	^speed! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 05:46'!speed	^speed! !SnakeFoopSnakeHeadPlayer1 removeSelector: #speed!!SnakeFoopSnakeHeadCpu methodsFor: 'nil' stamp: 'WN 7/15/2010 05:47'!speed	Transcript show:'cpu speed called'.	^speed! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33724454!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer1 new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33729636!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer2 new.		player2Snake color: SnakeFoopRandomColor new getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:47' prior: 33719667!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	newCpuSnake position: self getRandomPosition.	Transcript show: 'Adding new CPU snake at: ', newCpuSnake position.	Transcript cr.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:53' prior: 33731529!speed	| tempDirections |	tempDirections_Array new:4.	tempDirections at:1 put: Point new setX:10 setY:0.	tempDirections at:2 put: Point new setX:-10 setY:0.	tempDirections at:3 put: Point new setX:0 setY:10.	tempDirections at:4 put: Point new setX:0 setY:-10.				speed  tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:53' prior: 33732978!speed	| tempDirections |	tempDirections_Array new:4.	tempDirections at:1 put: (Point new setX:10 setY:0).	tempDirections at:2 put: (Point new setX:-10 setY:0).	tempDirections at:3 put: (Point new setX:0 setY:10).	tempDirections at:4 put: (Point new setX:0 setY:-10).				speed  tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:56' prior: 33733430!speed	| tempDirections left right up down|	left_(Point new setX:-10 setY:0).	right_(Point new setX:10 setY:0).	up_(Point new setX:0 setY:10).	down_(Point new setX:0 setY:-10).		tempDirections_Array new:4.	tempDirections at:1 put: left.	tempDirections at:2 put: right.	tempDirections at:3 put: up.	tempDirections at:4 put: down.				speed  tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:56' prior: 33733890!speed	| tempDirections left right up down|	left_(Point new setX:-10 setY:0).	right_(Point new setX:10 setY:0).	up_(Point new setX:0 setY:10).	down_(Point new setX:0 setY:-10).		tempDirections_Array new:4.	tempDirections at:1 put: left.	tempDirections at:2 put: right.	tempDirections at:3 put: up.	tempDirections at:4 put: down.				speed_ tempDirections atWrap:(1 to: (tempDirections size)) atRandom.	^speed! !!SnakeFoopSnakeHeadCpu methodsFor: 'nil' stamp: 'WN 7/15/2010 05:58'!stepTime	^ 100! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:58' prior: 33734910!stepTime	^ 500! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:59'!step	"changes the direction for the cpu snake"	| tempDirections left right up down|	left_(Point new setX:-10 setY:0).	right_(Point new setX:10 setY:0).	up_(Point new setX:0 setY:10).	down_(Point new setX:0 setY:-10).		tempDirections_Array new:4.	tempDirections at:1 put: left.	tempDirections at:2 put: right.	tempDirections at:3 put: up.	tempDirections at:4 put: down.				speed_ tempDirections atWrap:(1 to: (tempDirections size)) atRandom.! !Smalltalk removeClassNamed: #Snake!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:33' prior: 33732499!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: SnakeFoopRandomColor new getRandomColor.	newCpuSnake position: self getRandomPosition.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !SnakeFoopGame new openInWorld.!----QUIT----{15 July 2010 . 6:34:06 am} Squeak4.1.image priorSource: 20591!----STARTUP----{15 July 2010 . 6:34:16 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!Smalltalk removeClassNamed: #SnakeFoopCoordinates!SnakeFoopSnakeHeadCpu removeSelector: #speed!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'nil' stamp: 'WN 7/15/2010 06:35' prior: 33735031!stepTime	^ 300! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 06:41'!changeDirectionUp	"changes the direction to move the snake upwards"	speed_(Point new setX:0 setY:-10).! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:41' prior: 33736612!changeDirectionUp	"changes the direction to move the snake upwards"	speed_(Point new setX:0 setY:10).! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:41' prior: 33730699!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self changeDirectionUp ].	keyValue = 29 ifTrue: [ self turnLeft]! !!SnakeFoopSnakeHeadPlayer1 methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:41' prior: 33737018!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self changeDirectionUp ].	keyValue = 29 ifTrue: [ self changeDirectionUp]! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:42'!stepTime	^ 100! !!SnakeFoopSnakeHeadPlayer1 methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:42' prior: 33730487!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:42' prior: 33737673!handlesKeyboard: evt	"sdf"	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:42' prior: 33737801!handlesKeyboard: evt	^ true! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:43' prior: 33736820!changeDirectionUp	"changes the direction to move the snake upwards"	Transcript show:'change dir up'.	speed_(Point new setX:0 setY:10).! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:45' prior: 33738100!changeDirectionUp	"changes the direction to move the snake upwards"	Transcript show:'change dir up'.	speed setX:0 setY:10.! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:45'!handlesMouseOver: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:46'!mouseEnter: evt	evt hand newKeyboardFocus: self! !SnakeFoopGame new openInWorld.!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHeadPlayer1 methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:48'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:48'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self changeDirectionUp ].	keyValue = 29 ifTrue: [ self changeDirectionUp]! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:48'!handlesMouseOver: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:48'!mouseEnter: evt	evt hand newKeyboardFocus: self! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:48'!stepTime	^ 100! !SnakeFoopSnakeHeadPlayer subclass: #SnakeFoopSnakeHeadPlayer1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHeadPlayer subclass: #SnakeFoopSnakeHeadPlayer2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHeadPlayer2 removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer2 removeSelector: #keyStroke:!SnakeFoopSnakeHeadPlayer1 removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer1 removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer1 removeSelector: #mouseEnter:!SnakeFoopSnakeHeadPlayer1 removeSelector: #stepTime!SnakeFoopSnakeHeadPlayer removeSelector: #keyStroke:!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:51' prior: 33658872!move:newPosition	"moves the element to the given position"	| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].			Transcript show:'move called'.	Transcript cr.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:51' prior: 33740576!move:newPosition	"moves the element to the given position"	| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].		Transcript show:'move called'.	Transcript cr.! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:51' prior: 33740907!move:newPosition	"moves the element to the given position"	| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:51' prior: 33739165!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self changeDirectionUp ].	keyValue = 29 ifTrue: [ self changeDirectionUp ]! !!SnakeFoopSnakeHeadPlayer1 methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:52' prior: 33741536!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ self changeDirectionUp. Transcript show:'huch'. ].	keyValue = 29 ifTrue: [ self changeDirectionUp.Transcript show:'huch'. ]! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:52'!handlesMouseOver: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:52' prior: 33742136!handlesMouseOver: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:53'!handlesKeyboard: evt	^ true! !!SnakeFoopSnakeHeadPlayer1 methodsFor: 'nil' stamp: 'WN 7/15/2010 06:53'!mouseEnter: evt	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 06:53'!mouseEnter: evt	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:54'!handlesMouseOver: evt	^ true! !SnakeFoopSnakeHeadPlayer1 removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer1 removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer1 removeSelector: #mouseEnter:!SnakeFoopSnakeHeadPlayer removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer removeSelector: #mouseEnter:!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 06:55'!handlesKeyboard: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:55'!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ Transcript show:'right'. ].	keyValue = 29 ifTrue: [ Transcript show:'left'.]! !SnakeFoopGame new openInWorld.!Smalltalk removeClassNamed: #SnakeFoopSnakeHeadPlayer1!Smalltalk removeClassNamed: #SnakeFoopSnakeHeadPlayer2!SnakeFoopSnakeHeadPlayer removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer removeSelector: #stepTime!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:58' prior: 33743254!keyStroke: evt	| keyValue |	keyValue _ evt keyCharacter asciiValue.	keyValue = 28 ifTrue: [ player1Snake changeDirectionUp. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionUp. ]! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:59' prior: 33738407!changeDirectionUp	"changes the direction to move the snake upwards"	speed setX:0 setY:10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:59'!changeDirectionDown	"changes the direction to move the snake upwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00'!changeDirectionRight	"changes the direction to move the snake upwards"	speed setX:10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00'!changeDirectionLeft	"changes the direction to move the snake left"	speed setX:-10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33744288!changeDirectionDown	"changes the direction to move the snake downwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33744470!changeDirectionRight	"changes the direction to move the snake right"	speed setX:10 setY:0.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:01' prior: 33735136!step	"changes the direction for the cpu snake"	| tempDirections left right up down|	left_self changeDirectionUp.	right_(Point new setX:10 setY:0).	up_(Point new setX:0 setY:10).	down_(Point new setX:0 setY:-10).		tempDirections_Array new:4.	tempDirections at:1 put: left.	tempDirections at:2 put: right.	tempDirections at:3 put: up.	tempDirections at:4 put: down.				speed_ tempDirections atWrap:(1 to: (tempDirections size)) atRandom.! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:05' prior: 33745246!step	"changes the direction for the cpu snake"	| temp |		temp_  (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionUp.].	temp==3 ifTrue:[self changeDirectionUp.].	temp==4 ifTrue:[self changeDirectionUp.].! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:05' prior: 33745835!step	"changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionUp.].	temp==3 ifTrue:[self changeDirectionUp.].	temp==4 ifTrue:[self changeDirectionUp.].! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:05' prior: 33746203!step	"changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:05' prior: 33746570!step	"changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:08' prior: 33743785!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionUp. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionUp. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionUp. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionUp. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:09' prior: 33747342!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionUp. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionUp. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:09' prior: 33747915!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	Transcript show:keyValue.	Transcript cr.	"this are the keys for player 1"	player1Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionUp. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionUp. ].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:10' prior: 33748493!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[	keyValue = 28 ifTrue: [ player1Snake changeDirectionUp. ].	keyValue = 29 ifTrue: [ player1Snake changeDirectionUp. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:10' prior: 33749147!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:11' prior: 33749725!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 119 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 115 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 97 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 100 ifTrue: [ player1Snake changeDirectionRight. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:11' prior: 33711866!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33744109!changeDirectionUp	"changes the direction to move the snake upwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33744847!changeDirectionDown	"changes the direction to move the snake downwards"	speed setX:0 setY:10.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33732088!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer new.		player2Snake color: SnakeFoopRandomColor new getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:13' prior: 33731677!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: SnakeFoopRandomColor new getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:13' prior: 33750560!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 119 ifTrue: [ player2Snake changeDirectionUp. ].		keyValue = 115 ifTrue: [ player2Snake changeDirectionDown. ].		keyValue = 97 ifTrue: [ player2Snake changeDirectionLeft. ].		keyValue = 100 ifTrue: [ player2Snake changeDirectionRight. ].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:20' prior: 33729363!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake"! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:20' prior: 33754837!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake"	! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:22' prior: 33755146!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake"	temp _ (1 to: 10) atRandom.	snakes size < temp ifTrue:[		self addNewCpuSnake.		].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:24' prior: 33755457!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake"	temp _ (1 to: 10) atRandom.	1 == temp ifTrue:[		self addNewCpuSnake.		].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:24' prior: 33755885!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake"	snakes size > 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:25' prior: 33756271!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size > 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:25' prior: 33756691!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size > 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:25' prior: 33757197!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 07:33' prior: 33697032!stepTime	"sets the time between the steps"	^ 100! !----QUIT----{15 July 2010 . 7:33:19 am} Squeak4.1.image priorSource: 181651!----STARTUP----{15 July 2010 . 7:33:30 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:34' prior: 33742586!mouseEnter: evt	"sets the keyboard focus to this panel"	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:34' prior: 33758607!mouseEnter: evt	"sets the keyboard focus to this panel (if the mouse clicks on the window)"	evt hand newKeyboardFocus: self! !SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed lastElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 07:35'!lastElement	"returns the last Element of this snake"	^lastElement! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 07:36' prior: 33729160!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	lastElement_self.	self startStepping	! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:36'!lastElement:newLastElement	"sets a new last element"	lastElement_newLastElement.! !SnakeFoopGame new openInWorld.!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHead removeSelector: #lastElement!SnakeFoopSnakeHead removeSelector: #lastElement:!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph gameBoardSize player1Snake player2Snake availableColors'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:39' prior: 33705681!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.		snakes_OrderedCollection new.	gameBoardSize _ 300.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 07:39'!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.! !Smalltalk removeClassNamed: #SnakeFoopRandomColor!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33753133!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer new.		player2Snake color: self getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:40' prior: 33753533!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33735759!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: self getRandomColor.	newCpuSnake position: self getRandomPosition.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:48' prior: 33757735!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		self point:newPosition in:self ifTrue:[Transcript show:'draussen'.].				temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:51' prior: 33762235!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		self containsPoint:newPosition ifTrue:[Transcript show:'draussen'.].				temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:53' prior: 33762846!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		self fullContainsPoint:newPosition ifTrue:[Transcript show:'draussen'.].				temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:56' prior: 33763457!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		(self fullContainsPoint:newPosition) ifFalse:[Transcript show:'draussen'.].				temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:57' prior: 33764072!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		(self containsPoint:newPosition) ifFalse:[].				temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:57' prior: 33764690!step	"moves all registered snakes"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		(self containsPoint:newPosition) ifFalse:[Transcript show:'huch'.].				temp move:newPosition.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph gameBoardSize player1Snake player2Snake availableColors borderMode'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:59' prior: 33760208!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	borderMode_'warp'.	snakes_OrderedCollection new.	gameBoardSize _ 300.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 08:02'!handleBorderColisionFromSnake:snake newPosition:newPosition	"handels border violations"	|  |	! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:05' prior: 33765244!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		(self containsPoint:newPosition) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:06' prior: 33766907!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		(gameBoardMorph containsPoint:newPosition) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:08' prior: 33767596!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		(gameBoardMorph containsPoint:newPosition) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 08:13' prior: 33759311!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping	! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 08:17' prior: 33768328!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph containsPoint:newPosition) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:22' prior: 33769217!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph containsRect:(temp bounds translateBy: temp speed)) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:22' prior: 33769888!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed)) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:24' prior: 33706755!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.	gameBoardMorph borderWidth: 0.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:25' prior: 33771363!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:25' prior: 33771727!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:26' prior: 33772059!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph hResizing: #shrinkWrap.	gameBoardMorph vResizing: #shrinkWrap.	gameBoardMorph listDirection: #topToBottom.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:26' prior: 33772390!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:27' prior: 33766090!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	borderMode_'warp'.	snakes_OrderedCollection new.	gameBoardSize _ 299.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:27' prior: 33773210!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	borderMode_'warp'.	snakes_OrderedCollection new.	gameBoardSize _ 305.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:28' prior: 33773907!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	borderMode_'warp'.	snakes_OrderedCollection new.	gameBoardSize _ 300.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:29' prior: 33770617!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				Transcript show:gameBoardMorph bounds.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed)) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:29' prior: 33775258!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed)) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:29' prior: 33772879!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.				Transcript show:gameBoardMorph bounds.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:30' prior: 33776038!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.		Transcript show:newPosition.		Transcript cr.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed)) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:31' prior: 33777182!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed)) ifTrue:[temp move:newPosition.].						].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:31' prior: 33777966!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		(gameBoardMorph bounds containsRect:(temp bounds )) ifTrue:[			newPosition_temp position + temp speed.			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:34' prior: 33778669!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:34' prior: 33776751!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: ((gameBoardSize-9) @ (gameBoardSize-9)).	gameBoardMorph color:Color lightGray.				Transcript show:gameBoardMorph bounds.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:34' prior: 33780163!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: ((gameBoardSize-8) @ (gameBoardSize-8)).	gameBoardMorph color:Color lightGray.				Transcript show:gameBoardMorph bounds.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:36' prior: 33780579!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.				Transcript show:gameBoardMorph bounds.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:36' prior: 33780995!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 08:38' prior: 33761489!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		"player1Snake position: self getRandomPosition."			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:38' prior: 33781685!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:39' prior: 33782100!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.		Transcript show:'Adding new snake for player 1: ', player1Snake position.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:39' prior: 33782480!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.		Transcript show:'Adding new snake for player 1: ', player1Snake position.		Transcript cr.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:40' prior: 33779415!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				Transcript show:'Adding new snake for player 1: ', newPosition.		Transcript cr.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:41' prior: 33783442!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:41' prior: 33782969!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.		Transcript show:'Adding new snake for player 1: ', player1Snake position.		Transcript cr.		Transcript show:gameBoardMorph borders.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:41' prior: 33784971!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.		Transcript show:'Adding new snake for player 1: ', player1Snake position.		Transcript cr.		Transcript show:gameBoardMorph position.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:44' prior: 33785519!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.		Transcript show:'Adding new snake for player 1: ', player1Snake position.		Transcript cr.		Transcript show:gameBoardMorph bounds.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:45' prior: 33721292!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position y).			^Point new setX:positionX setY:positionY! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:45' prior: 33786068!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:48' prior: 33784266!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:50' prior: 33774604!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		borderMode_'stop'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph gameBoardSize player1Snake player2Snake availableColors currentBorderMode availableBorderModes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:50' prior: 33788168!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:51' prior: 33789088!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:54'!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:54'!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:54' prior: 33791894!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !SnakeFoopGame removeSelector: #generateStatusArea!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:55' prior: 33789761!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:56' prior: 33793205!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph borderModeMorph gameBoardSize player1Snake player2Snake availableColors currentBorderMode availableBorderModes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:57' prior: 33794670!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:58' prior: 33787453!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph value:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:59' prior: 33796007!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:00' prior: 33795535!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color gray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:00' prior: 33797658!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:02' prior: 33798169!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contents: '-').! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:03' prior: 33798651!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contents: 'BorderMode: '; textColor:Color white);		 addMorphBack: (borderModeMorph_TextMorph contents: '-'; textColor:Color white).		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:04' prior: 33799129!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:04' prior: 33799656!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contentsAsls: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:04' prior: 33800137!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contentsAsls: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contentsAsls: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:05' prior: 33800622!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:06' prior: 33793796!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color white;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:06' prior: 33801629!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:06' prior: 33801111!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:07' prior: 33802533!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:08' prior: 33796826!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	borderModeMorph defaultColor: Color white.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:09' prior: 33804789!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	borderModeMorph changeFont.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:09' prior: 33805655!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33790574!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33803440!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33781370!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color black.		^gameBoardMorph! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33809161!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33803925!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:13' prior: 33806506!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				currentBorderMode=='stop' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			currentBorderMode=='warp' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:14' prior: 33810749!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				currentBorderMode=='stop' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			currentBorderMode=='warp' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			currentBorderMode=='poison' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:16' prior: 33811745!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				temp move:newPosition.].				currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:16' prior: 33812904!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				temp move:newPosition.].				currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:17' prior: 33808642!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:17' prior: 33814873!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:17' prior: 33813806!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				temp move:newPosition.].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:31' prior: 33815838!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition x ifTrue:[				newPosition x: newPosition x-gameBoardSize.				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:32' prior: 33816863!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition x ifTrue:[				newPosition setX:(newPosition x-gameBoardSize).				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:38' prior: 33818003!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition y ifTrue:[				newPosition_newPosition - (Point new setX:0 setY:gameBoardSize).				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:38' prior: 33819180!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition y ifTrue:[				newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:40' prior: 33820341!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:40' prior: 33809851!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:40' prior: 33821574!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='wrap' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:41' prior: 33823678!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:42' prior: 33824874!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:42' prior: 33826098!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			Transcript show:'bounds erreicht'.			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:44' prior: 33827289!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			Transcript show:'bounds erreicht'.			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:45' prior: 33828551!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			Transcript show:'bounds erreicht'.			currentBorderMode='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:45' prior: 33829780!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:46' prior: 33831041!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:52' prior: 33832203!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:53' prior: 33822780!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!----STARTUP----{15 July 2010 . 9:54:47 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 15 July 2010 at 8:45:40 am'!Smalltalk renameClassNamed: #SnakeBoardMorph as: #SnakeFoopGame!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph gameBoardSize player1Snake player2Snake availableColors borderMode'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeElement as: #SnakeFoopSnakeElement!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadCpu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeFoopSnakeHeadPlayer1 as: #SnakeFoopSnakeHeadPlayer!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeStrategy as: #SnakeFoopStrategy!Object subclass: #SnakeFoopStrategy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33735759!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: self getRandomColor.	newCpuSnake position: self getRandomPosition.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33753133!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer new.		player2Snake color: self getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:36' prior: 33706755!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color lightGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:11' prior: 33751398!generateStatusArea	"this method generates the game area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:39'!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:45' prior: 33721292!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position y).			^Point new setX:positionX setY:positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:02'!handleBorderColisionFromSnake:snake newPosition:newPosition	"handels border violations"	|  |	! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:55' prior: 33743144!handlesKeyboard: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:54' prior: 33742716!handlesMouseOver: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:28' prior: 33705681!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	borderMode_'warp'.	snakes_OrderedCollection new.	gameBoardSize _ 300.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:13' prior: 33753976!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 119 ifTrue: [ player2Snake changeDirectionUp. ].		keyValue = 115 ifTrue: [ player2Snake changeDirectionDown. ].		keyValue = 97 ifTrue: [ player2Snake changeDirectionLeft. ].		keyValue = 100 ifTrue: [ player2Snake changeDirectionRight. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:34' prior: 33742586!mouseEnter: evt	"sets the keyboard focus to this panel (if the mouse clicks on the window)"	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:45' prior: 33753533!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:41' prior: 33757735!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:33' prior: 33758267!stepTime	"sets the time between the steps"	^ 100! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:51' prior: 33741269!move:newPosition	"moves the element to the given position"	| temp |	temp_ self position.	self position: newPosition.	nextElement==nil ifFalse:[nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33730283!nextElement	"returns the next element of this element"	^nextElement! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33730032!nextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:13' prior: 33729160!initialize	super initialize.	self extent: 10 @ 10.	speed_ Point new setX:0 setY:0.	self startStepping	! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 05:46' prior: 33731391!speed	^speed! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33752939!changeDirectionDown	"changes the direction to move the snake downwards"	speed setX:0 setY:10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33744652!changeDirectionLeft	"changes the direction to move the snake left"	speed setX:-10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33745047!changeDirectionRight	"changes the direction to move the snake right"	speed setX:10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33752743!changeDirectionUp	"changes the direction to move the snake upwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:05' prior: 33746977!step	"changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !!SnakeFoopSnakeHeadCpu methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:35' prior: 33736493!stepTime	^ 300! !!SnakeFoopStrategy methodsFor: 'as yet unclassified' stamp: 'WN 7/14/2010 23:13' prior: 33692189!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !SnakeFoopStrategy removeSelector: #eatsSnakeColor:overColor:!SnakeFoopSnakeHeadPlayer removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer removeSelector: #keyStroke:!SnakeFoopSnakeHeadPlayer removeSelector: #mouseEnter:!SnakeFoopSnakeHeadPlayer removeSelector: #speed!SnakeFoopSnakeHeadPlayer removeSelector: #stepTime!SnakeFoopSnakeHeadCpu removeSelector: #speed!SnakeFoopSnakeHead removeSelector: #handlesKeyboard:!SnakeFoopSnakeHead removeSelector: #keyStroke:!SnakeFoopSnakeHead removeSelector: #lastElement!SnakeFoopSnakeHead removeSelector: #lastElement:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getNextElement!SnakeFoopSnakeElement removeSelector: #getPositionX!SnakeFoopSnakeElement removeSelector: #getPositionY!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setNextElement:!SnakeFoopSnakeElement removeSelector: #setPositionX:!SnakeFoopSnakeElement removeSelector: #setPositionX:andPositionY:!SnakeFoopSnakeElement removeSelector: #setPositionY:!SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #getRandomPositionWithin!SnakeFoopGame removeSelector: #initializeToStandAlone!----End fileIn of a stream----!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:45' prior: 33839652!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position y).			^Point new setX:positionX setY:positionY! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:45' prior: 33842224!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:48' prior: 33842604!step	"moves snakes, generates new snakes and checks for possible consumings"	"moves all registered snakes and handels border violations"	| temp newPosition |	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:50' prior: 33840509!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		borderMode_'stop'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:50' prior: 33849496!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:51' prior: 33850162!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateStatusArea.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:54'!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:54'!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:54' prior: 33852968!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !SnakeFoopGame removeSelector: #generateStatusArea!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:55' prior: 33850835!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:56' prior: 33854279!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:57' prior: 33855744!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:58' prior: 33848781!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph value:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:59' prior: 33856811!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:00' prior: 33856339!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color gray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:00' prior: 33858396!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:02' prior: 33858874!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contents: '-').! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:03' prior: 33859356!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contents: 'BorderMode: '; textColor:Color white);		 addMorphBack: (borderModeMorph_TextMorph contents: '-'; textColor:Color white).		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:04' prior: 33859834!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:04' prior: 33860361!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contentsAsls: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:04' prior: 33860842!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (TextMorph contentsAsls: 'BorderMode: ');		 addMorphBack: (borderModeMorph_TextMorph contentsAsls: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:05' prior: 33861327!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:06' prior: 33854870!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color white;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:06' prior: 33862301!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:06' prior: 33861816!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color darkGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:07' prior: 33863172!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color darkGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:08' prior: 33857597!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	borderModeMorph defaultColor: Color white.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:09' prior: 33865395!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	borderModeMorph changeFont.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:09' prior: 33866228!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.].				].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33851648!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33864046!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'BorderMode: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33837795!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color black.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33869668!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33864531!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:13' prior: 33867046!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				currentBorderMode=='stop' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			currentBorderMode=='warp' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:14' prior: 33871190!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				currentBorderMode=='stop' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			currentBorderMode=='warp' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].			currentBorderMode=='poison' ifTrue:[			(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[				temp move:newPosition.].				].		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:16' prior: 33872186!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				temp move:newPosition.].				currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:16' prior: 33873345!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				temp move:newPosition.].				currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:17' prior: 33869182!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:17' prior: 33875281!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:17' prior: 33874247!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				temp move:newPosition.].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:31' prior: 33876246!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition x ifTrue:[				newPosition x: newPosition x-gameBoardSize.				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:32' prior: 33877271!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition x ifTrue:[				newPosition setX:(newPosition x-gameBoardSize).				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:38' prior: 33878411!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition y ifTrue:[				newPosition_newPosition - (Point new setX:0 setY:gameBoardSize).				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:38' prior: 33879555!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			gameBoardMorph bottom > newPosition y ifTrue:[				newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[								temp move:newPosition.				].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:40' prior: 33880716!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='warp' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:40' prior: 33870325!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:40' prior: 33881883!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='wrap' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:41' prior: 33883921!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:42' prior: 33885084!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:42' prior: 33886275!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			Transcript show:'bounds erreicht'.			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:44' prior: 33887466!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			Transcript show:'bounds erreicht'.			currentBorderMode=='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:45' prior: 33888695!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			Transcript show:'bounds erreicht'.			currentBorderMode='wrap' ifTrue:[				Transcript show:'wrap'.				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:45' prior: 33889924!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:46' prior: 33891152!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom > newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:52' prior: 33892314!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:53' prior: 33883056!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:57' prior: 33893476!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 09:57' prior: 33895514!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].	].				"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 09:58'!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !Smalltalk removeClassNamed: #SnakeFoopStrategy!Smalltalk removeClassNamed: #SnakeFoopRandomColor!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 10:05' prior: 33896675!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				(temp bounds intersects: m bounds) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:06' prior: 33898696!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			].				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isMemberOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:08' prior: 33900020!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) ifTrue:[			temp move:newPosition.			]		 ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isMemberOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:08' prior: 33901389!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[			temp move:newPosition.			]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isMemberOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:08' prior: 33902646!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isMemberOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:09' prior: 33903905!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:11' prior: 33905156!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isMemberOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:13' prior: 33906438!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 10:16' prior: 33907722!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m inheritsFrom: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha'.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:17' prior: 33908998!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m inheritsFrom: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha: ', m.					Transcript cr.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:18' prior: 33910284!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isMemberOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha: ', m.					Transcript cr.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:18' prior: 33911595!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha: ', m.					Transcript cr.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:20' prior: 33912904!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					Transcript show:'gotcha: ', m.					Transcript cr.					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:21' prior: 33914244!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					m==temp ifFalse:[						Transcript show:'gotcha: ', m, ' ', temp.						Transcript cr.					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'nil' stamp: 'WN 7/15/2010 10:31'!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifFalse:[			nextElement addElement:newSnakeElement.		]	ifTrue:[		nextElement_newSnakeElement.		]! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:31' prior: 33915553!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						[(temp color) == [self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)]] ifTrue:[							m nextElement: nil.							temp addElement:m.						].					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:32' prior: 33917175!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						[(temp color) == [self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)]] ifTrue:[							m nextElement: nil.							temp addElement:m.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:33' prior: 33918588!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						[(temp color) = [self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)]] ifTrue:[							m nextElement: nil.							temp addElement:m.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:34' prior: 33920120!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) == (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m nextElement: nil.							temp addElement:m.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 5"	snakes size < 6 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:34' prior: 33921618!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) == (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m nextElement: nil.							temp addElement:m.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 10:44' prior: 33916892!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:45' prior: 33923115!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) == (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m_nil.							temp addElement:m.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:46' prior: 33924880!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) == (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m_nil.							temp addElement:(SnakeFoopSnakeElement new).						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:48' prior: 33926331!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) == (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m_nil.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 10:49' prior: 33924597!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position: self position.		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 10:49' prior: 33929382!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !SnakeFoopGame new openInWorld.!SnakeFoopGame removeSelector: #handleBorderColisionFromSnake:newPosition:!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 10:50' prior: 33927808!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m_nil.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:51' prior: 33930156!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							Transcript show:'leckas'.							m_nil.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:51' prior: 33931744!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m_nil.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 10:53' prior: 33843465!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:'move'.		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 10:54' prior: 33934938!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 10:57' prior: 33935281!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:58' prior: 33933365!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m_nil.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 10:58' prior: 33935864!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							Transcript show:'leckas'.							m_nil.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							Transcript show:'umfärben'.							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 11:00' prior: 33937454!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							Transcript show:'leckas'.							m abandon.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							Transcript show:'umfärben'.							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 11:01' prior: 33939113!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m abandon.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !----QUIT----{15 July 2010 . 11:01:31 am} Squeak4.1.image priorSource: 203888!----STARTUP----{15 July 2010 . 11:29:13 am} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!!SnakeFoopSnakeElement methodsFor: 'nil' stamp: 'WN 7/15/2010 11:31'!reduceSize	"reduces the size of the snake by one"	nextElement==nil ifFalse:[			nextElement reduceSize.		] ifTrue: [			self abandon.		].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:31' prior: 33935598!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	Transcript show:temp.	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:' ',temp.		Transcript cr		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:35' prior: 33929726!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		Transcript show:'neues element hinzugefügt'.		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:36' prior: 33943281!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:37' prior: 33943806!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		Transcript show:nextElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:41' prior: 33942765!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:42' prior: 33944560!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:'neues element'.		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:43' prior: 33944910!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	Transcript show:temp.	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:' ', temp.		Transcript cr.		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:44' prior: 33945262!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	Transcript show:temp, ' '.	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:' ', temp.		Transcript cr.		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:46' prior: 33945648!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	Transcript show:temp,' '.	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:' ', temp.		Transcript cr.		nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:46' prior: 33946105!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	Transcript show:temp,' as '.	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:' ', temp.		Transcript cr.		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:46' prior: 33946462!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	Transcript show:'vorher: ',temp,' as '.	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:' ', temp.		Transcript cr.		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:48' prior: 33946888!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	Transcript show:'vorher: ',self, ' ', temp,' as '.	self position: newPosition.	nextElement==nil ifFalse:[		Transcript show:' ', temp.		Transcript cr.		nextElement move:temp.].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:50' prior: 33944151!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 12:28' prior: 33947325!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 12:30' prior: 33940776!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m abandon.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 12:34' prior: 33948411!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m abandon.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeElement methodsFor: 'nil' stamp: 'WN 7/15/2010 12:57'!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeHead methodsFor: 'nil' stamp: 'WN 7/15/2010 12:57' prior: 33844117!initialize	super initialize.	speed_ Point new setX:0 setY:0.	! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:06' prior: 33894649!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!----STARTUP----{15 July 2010 . 1:07:29 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 15 July 2010 at 1:00:57 pm'!Smalltalk renameClassNamed: #SnakeBoardMorph as: #SnakeFoopGame!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph borderModeMorph gameBoardSize player1Snake player2Snake availableColors currentBorderMode availableBorderModes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeElement as: #SnakeFoopSnakeElement!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadCpu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeFoopSnakeHeadPlayer1 as: #SnakeFoopSnakeHeadPlayer!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837039!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: self getRandomColor.	newCpuSnake position: self getRandomPosition.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837405!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer new.		player2Snake color: self getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:58' prior: 33897851!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33867845!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:17' prior: 33875768!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33869995!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:39' prior: 33839417!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:45' prior: 33847986!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position y).			^Point new setX:positionX setY:positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:55' prior: 33840256!handlesKeyboard: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:54' prior: 33840382!handlesMouseOver: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:53' prior: 33894649!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:13' prior: 33841173!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 119 ifTrue: [ player2Snake changeDirectionUp. ].		keyValue = 115 ifTrue: [ player2Snake changeDirectionDown. ].		keyValue = 97 ifTrue: [ player2Snake changeDirectionLeft. ].		keyValue = 100 ifTrue: [ player2Snake changeDirectionRight. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:34' prior: 33842011!mouseEnter: evt	"sets the keyboard focus to this panel (if the mouse clicks on the window)"	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:45' prior: 33848401!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 12:34' prior: 33940776!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							m abandon.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:33' prior: 33843309!stepTime	"sets the time between the steps"	^ 100! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:50' prior: 33929726!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 12:57'!initialize	super initialize.	self extent: 10 @ 10.	self startStepping! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 12:28' prior: 33935598!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843744!nextElement	"returns the next element of this element"	^nextElement! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843920!nextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:31'!reduceSize	"reduces the size of the snake by one"	nextElement==nil ifFalse:[			nextElement reduceSize.		] ifTrue: [			self abandon.		].! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 12:57' prior: 33844117!initialize	super initialize.	speed_ Point new setX:0 setY:0.	! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 05:46' prior: 33844317!speed	^speed! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33844433!changeDirectionDown	"changes the direction to move the snake downwards"	speed setX:0 setY:10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844632!changeDirectionLeft	"changes the direction to move the snake left"	speed setX:-10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844827!changeDirectionRight	"changes the direction to move the snake right"	speed setX:10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33845023!changeDirectionUp	"changes the direction to move the snake upwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:05' prior: 33845222!step	"changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !!SnakeFoopSnakeHeadCpu methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:35' prior: 33845585!stepTime	^ 300! !SnakeFoopSnakeHeadPlayer removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer removeSelector: #keyStroke:!SnakeFoopSnakeHeadPlayer removeSelector: #mouseEnter:!SnakeFoopSnakeHeadPlayer removeSelector: #speed!SnakeFoopSnakeHeadPlayer removeSelector: #stepTime!SnakeFoopSnakeHeadCpu removeSelector: #speed!SnakeFoopSnakeHead removeSelector: #handlesKeyboard:!SnakeFoopSnakeHead removeSelector: #keyStroke:!SnakeFoopSnakeHead removeSelector: #lastElement!SnakeFoopSnakeHead removeSelector: #lastElement:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getNextElement!SnakeFoopSnakeElement removeSelector: #getPositionX!SnakeFoopSnakeElement removeSelector: #getPositionY!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setNextElement:!SnakeFoopSnakeElement removeSelector: #setPositionX:!SnakeFoopSnakeElement removeSelector: #setPositionX:andPositionY:!SnakeFoopSnakeElement removeSelector: #setPositionY:!SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #getRandomPositionWithin!SnakeFoopGame removeSelector: #initializeToStandAlone!Smalltalk removeClassNamed: #SnakeFoopRandomColor!----End fileIn of a stream----!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:11' prior: 33963413!initialize	super initialize.	self extent: 10 @ 10.! !!SnakeFoopSnakeHeadCpu methodsFor: 'nil' stamp: 'WN 7/15/2010 13:13'!initialize	"comment stating purpose of message"	super initialize.	self startStepping.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:13' prior: 33967731!initialize	super initialize.	self startStepping.! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 13:18' prior: 33961326!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							player1Snake == m ifTrue:[player1Snake_nil.].							player2Snake == m ifTrue:[player2Snake_nil.].							m abandon.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:19' prior: 33968059!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							player1Snake == m ifTrue:[player1Snake_nil.].							player2Snake == m ifTrue:[player2Snake_nil.].														m abandon.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 13:21'!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].								element abandon.! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 13:21' prior: 33969767!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:23' prior: 33971494!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].	snakes remove:element.								element abandon.! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:26' prior: 33971791!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:32' prior: 33973806!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement elementsToDelete |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.		elementsToDelete _ Array new.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							elementsToDelete add:(snakes indexOf:m).							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:32' prior: 33973413!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].								element abandon.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:32' prior: 33977138!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].		snakes remove:element.								element abandon.! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:33' prior: 33975418!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement elementsToDelete |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.		elementsToDelete _ Array new.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[														self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:35' prior: 33977451!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].								element abandon.! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:39' prior: 33977780!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement elementsToDelete |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.		elementsToDelete _ Array new.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							elementsToDelete add:(snakes indexOf:m).							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].	1 to: elementsToDelete size do:[:index|		snakes remove elementsToDelete atWrap:index.		].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:41' prior: 33979829!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:44' prior: 33981666!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].					gameBoardMorph left <= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].					gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].											temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:44' prior: 33959020!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!----STARTUP----{15 July 2010 . 1:46:13 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!SnakeFoopGame new openInWorld.!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 15 July 2010 at 1:42:27 pm'!Smalltalk renameClassNamed: #SnakeBoardMorph as: #SnakeFoopGame!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph borderModeMorph gameBoardSize player1Snake player2Snake availableColors currentBorderMode availableBorderModes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeElement as: #SnakeFoopSnakeElement!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadCpu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!Smalltalk renameClassNamed: #SnakeFoopSnakeHeadPlayer1 as: #SnakeFoopSnakeHeadPlayer!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837039!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: self getRandomColor.	newCpuSnake position: self getRandomPosition.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837405!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer new.		player2Snake color: self getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:35'!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].								element abandon.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:58' prior: 33897851!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33867845!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:17' prior: 33875768!generateDisplayArea	"this method generates the display area"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33869995!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:39' prior: 33839417!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:45' prior: 33847986!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position y).			^Point new setX:positionX setY:positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:55' prior: 33840256!handlesKeyboard: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:54' prior: 33840382!handlesMouseOver: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:53' prior: 33894649!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:13' prior: 33841173!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 119 ifTrue: [ player2Snake changeDirectionUp. ].		keyValue = 115 ifTrue: [ player2Snake changeDirectionDown. ].		keyValue = 97 ifTrue: [ player2Snake changeDirectionLeft. ].		keyValue = 100 ifTrue: [ player2Snake changeDirectionRight. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:34' prior: 33842011!mouseEnter: evt	"sets the keyboard focus to this panel (if the mouse clicks on the window)"	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:45' prior: 33848401!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 13:41' prior: 33940776!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:33' prior: 33843309!stepTime	"sets the time between the steps"	^ 100! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:50' prior: 33929726!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:11'!initialize	super initialize.	self extent: 10 @ 10.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 12:28' prior: 33935598!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843744!nextElement	"returns the next element of this element"	^nextElement! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843920!nextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:31'!reduceSize	"reduces the size of the snake by one"	nextElement==nil ifFalse:[			nextElement reduceSize.		] ifTrue: [			self abandon.		].! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 12:57' prior: 33844117!initialize	super initialize.	speed_ Point new setX:0 setY:0.	! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 05:46' prior: 33844317!speed	^speed! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33844433!changeDirectionDown	"changes the direction to move the snake downwards"	speed setX:0 setY:10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844632!changeDirectionLeft	"changes the direction to move the snake left"	speed setX:-10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844827!changeDirectionRight	"changes the direction to move the snake right"	speed setX:10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33845023!changeDirectionUp	"changes the direction to move the snake upwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:13'!initialize	super initialize.	self startStepping.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:05' prior: 33845222!step	"changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !!SnakeFoopSnakeHeadCpu methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:35' prior: 33845585!stepTime	^ 300! !SnakeFoopSnakeHeadPlayer removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer removeSelector: #keyStroke:!SnakeFoopSnakeHeadPlayer removeSelector: #mouseEnter:!SnakeFoopSnakeHeadPlayer removeSelector: #speed!SnakeFoopSnakeHeadPlayer removeSelector: #stepTime!SnakeFoopSnakeHeadCpu removeSelector: #speed!SnakeFoopSnakeHead removeSelector: #handlesKeyboard:!SnakeFoopSnakeHead removeSelector: #keyStroke:!SnakeFoopSnakeHead removeSelector: #lastElement!SnakeFoopSnakeHead removeSelector: #lastElement:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getNextElement!SnakeFoopSnakeElement removeSelector: #getPositionX!SnakeFoopSnakeElement removeSelector: #getPositionY!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setNextElement:!SnakeFoopSnakeElement removeSelector: #setPositionX:!SnakeFoopSnakeElement removeSelector: #setPositionX:andPositionY:!SnakeFoopSnakeElement removeSelector: #setPositionY:!SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #getRandomPositionWithin!SnakeFoopGame removeSelector: #initializeToStandAlone!Smalltalk removeClassNamed: #SnakeFoopRandomColor!----End fileIn of a stream----!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 19:21' prior: 33994772!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:21' prior: 34001290!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:22' prior: 33990735!generateDisplayArea	"this method generates the display area where the border mode display is shown"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame commentStamp: 'WN 7/15/2010 19:24' prior: 0!This is the main Game Class. It generates the game area and all other objects and also controls the snakes (and their colissions and border handling)Instance Variables	availableBorderModes:		an array with the available border modes	availableColors:		an array with the available colors for the snakes	borderModeMorph:		the border mode display morph	currentBorderMode:		the currently selected border mode	gameBoardMorph:		the game area morph	gameBoardSize:		the game area size	player1Snake:		the first players snake	player2Snake:		the second players snake	snakes:		an array with all snake heads!!SnakeFoopSnakeElement commentStamp: 'WN 7/15/2010 19:25' prior: 0!This is the basic snake element. it implements the basic snake manipulation methods.Instance Variables	nextElement:		the next element from the snake. if nil this is the last element of the snake!!SnakeFoopSnakeHead commentStamp: 'WN 7/15/2010 19:27' prior: 0!This is the class for the snake heads. it is a subclass of the snake element and has the speed variable which is nessasary for movement and the direction methods for moving a snake. (which basically adds some fixed values to the current position)Instance Variables	speed:		the speed & direction of the snake!!SnakeFoopSnakeHeadCpu commentStamp: 'WN 7/15/2010 19:27' prior: 0!This is the class for a cpu controled snake. it uses the morph's stepping to randomly alter the direction.Instance Variables!!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:27' prior: 33999119!step	"randomly changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !!SnakeFoopSnakeHeadPlayer commentStamp: 'WN 7/15/2010 19:28' prior: 0!This is the class for the human controlled snakesInstance Variables!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 19:34' prior: 34002904!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph left <= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right >= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:34' prior: 33992466!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:53' prior: 34009124!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !----STARTUP----{15 July 2010 . 7:36:05 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 15 July 2010 at 7:28:28 pm'!Smalltalk renameClassNamed: #SnakeBoardMorph as: #SnakeFoopGame!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph borderModeMorph gameBoardSize player1Snake player2Snake availableColors currentBorderMode availableBorderModes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame commentStamp: 'WN 7/15/2010 19:24' prior: 0!This is the main Game Class. It generates the game area and all other objects and also controls the snakes (and their colissions and border handling)Instance Variables	availableBorderModes:		an array with the available border modes	availableColors:		an array with the available colors for the snakes	borderModeMorph:		the border mode display morph	currentBorderMode:		the currently selected border mode	gameBoardMorph:		the game area morph	gameBoardSize:		the game area size	player1Snake:		the first players snake	player2Snake:		the second players snake	snakes:		an array with all snake heads!Smalltalk renameClassNamed: #SnakeElement as: #SnakeFoopSnakeElement!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeElement commentStamp: 'WN 7/15/2010 19:25' prior: 0!This is the basic snake element. it implements the basic snake manipulation methods.Instance Variables	nextElement:		the next element from the snake. if nil this is the last element of the snake!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHead commentStamp: 'WN 7/15/2010 19:27' prior: 0!This is the class for the snake heads. it is a subclass of the snake element and has the speed variable which is nessasary for movement and the direction methods for moving a snake. (which basically adds some fixed values to the current position)Instance Variables	speed:		the speed & direction of the snake!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadCpu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHeadCpu commentStamp: 'WN 7/15/2010 19:27' prior: 0!This is the class for a cpu controled snake. it uses the morph's stepping to randomly alter the direction.Instance Variables!Smalltalk renameClassNamed: #SnakeFoopSnakeHeadPlayer1 as: #SnakeFoopSnakeHeadPlayer!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHeadPlayer commentStamp: 'WN 7/15/2010 19:28' prior: 0!This is the class for the human controlled snakesInstance Variables!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837039!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: self getRandomColor.	newCpuSnake position: self getRandomPosition.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837405!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer new.		player2Snake color: self getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:35'!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].								element abandon.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:58' prior: 33897851!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33867845!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:22' prior: 33875768!generateDisplayArea	"this method generates the display area where the border mode display is shown"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33869995!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:39' prior: 33839417!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:45' prior: 33847986!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position y).			^Point new setX:positionX setY:positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:55' prior: 33840256!handlesKeyboard: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:54' prior: 33840382!handlesMouseOver: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:53' prior: 33894649!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:13' prior: 33841173!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 119 ifTrue: [ player2Snake changeDirectionUp. ].		keyValue = 115 ifTrue: [ player2Snake changeDirectionDown. ].		keyValue = 97 ifTrue: [ player2Snake changeDirectionLeft. ].		keyValue = 100 ifTrue: [ player2Snake changeDirectionRight. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:34' prior: 33842011!mouseEnter: evt	"sets the keyboard focus to this panel (if the mouse clicks on the window)"	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:45' prior: 33848401!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:21' prior: 33940776!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:33' prior: 33843309!stepTime	"sets the time between the steps"	^ 100! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:50' prior: 33929726!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:11'!initialize	super initialize.	self extent: 10 @ 10.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 12:28' prior: 33935598!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843744!nextElement	"returns the next element of this element"	^nextElement! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843920!nextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:31'!reduceSize	"reduces the size of the snake by one"	nextElement==nil ifFalse:[			nextElement reduceSize.		] ifTrue: [			self abandon.		].! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 12:57' prior: 33844117!initialize	super initialize.	speed_ Point new setX:0 setY:0.	! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 05:46' prior: 33844317!speed	^speed! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33844433!changeDirectionDown	"changes the direction to move the snake downwards"	speed setX:0 setY:10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844632!changeDirectionLeft	"changes the direction to move the snake left"	speed setX:-10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844827!changeDirectionRight	"changes the direction to move the snake right"	speed setX:10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33845023!changeDirectionUp	"changes the direction to move the snake upwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:13'!initialize	super initialize.	self startStepping.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:27' prior: 33845222!step	"randomly changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !!SnakeFoopSnakeHeadCpu methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:35' prior: 33845585!stepTime	^ 300! !SnakeFoopSnakeHeadPlayer removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer removeSelector: #keyStroke:!SnakeFoopSnakeHeadPlayer removeSelector: #mouseEnter:!SnakeFoopSnakeHeadPlayer removeSelector: #speed!SnakeFoopSnakeHeadPlayer removeSelector: #stepTime!SnakeFoopSnakeHeadCpu removeSelector: #speed!SnakeFoopSnakeHead removeSelector: #handlesKeyboard:!SnakeFoopSnakeHead removeSelector: #keyStroke:!SnakeFoopSnakeHead removeSelector: #lastElement!SnakeFoopSnakeHead removeSelector: #lastElement:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getNextElement!SnakeFoopSnakeElement removeSelector: #getPositionX!SnakeFoopSnakeElement removeSelector: #getPositionY!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setNextElement:!SnakeFoopSnakeElement removeSelector: #setPositionX:!SnakeFoopSnakeElement removeSelector: #setPositionX:andPositionY:!SnakeFoopSnakeElement removeSelector: #setPositionY:!SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #getRandomPositionWithin!SnakeFoopGame removeSelector: #initializeToStandAlone!Smalltalk removeClassNamed: #SnakeFoopRandomColor!----End fileIn of a stream----!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:36' prior: 34018779!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:37' prior: 34021085!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:38' prior: 34028295!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!----STARTUP----{15 July 2010 . 7:39:30 pm} as /Users/werner/Documents/ed/repos/foopp/foop/ass3/Squeak4.1.image!'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 15 July 2010 at 7:38:10 pm'!Smalltalk renameClassNamed: #SnakeBoardMorph as: #SnakeFoopGame!AlignmentMorph subclass: #SnakeFoopGame	instanceVariableNames: 'snakes gameBoardMorph borderModeMorph gameBoardSize player1Snake player2Snake availableColors currentBorderMode availableBorderModes'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopGame commentStamp: 'WN 7/15/2010 19:24' prior: 0!This is the main Game Class. It generates the game area and all other objects and also controls the snakes (and their colissions and border handling)Instance Variables	availableBorderModes:		an array with the available border modes	availableColors:		an array with the available colors for the snakes	borderModeMorph:		the border mode display morph	currentBorderMode:		the currently selected border mode	gameBoardMorph:		the game area morph	gameBoardSize:		the game area size	player1Snake:		the first players snake	player2Snake:		the second players snake	snakes:		an array with all snake heads!Smalltalk renameClassNamed: #SnakeElement as: #SnakeFoopSnakeElement!Morph subclass: #SnakeFoopSnakeElement	instanceVariableNames: 'nextElement'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeElement commentStamp: 'WN 7/15/2010 19:25' prior: 0!This is the basic snake element. it implements the basic snake manipulation methods.Instance Variables	nextElement:		the next element from the snake. if nil this is the last element of the snake!SnakeFoopSnakeElement subclass: #SnakeFoopSnakeHead	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHead commentStamp: 'WN 7/15/2010 19:27' prior: 0!This is the class for the snake heads. it is a subclass of the snake element and has the speed variable which is nessasary for movement and the direction methods for moving a snake. (which basically adds some fixed values to the current position)Instance Variables	speed:		the speed & direction of the snake!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadCpu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHeadCpu commentStamp: 'WN 7/15/2010 19:27' prior: 0!This is the class for a cpu controled snake. it uses the morph's stepping to randomly alter the direction.Instance Variables!Smalltalk renameClassNamed: #SnakeFoopSnakeHeadPlayer1 as: #SnakeFoopSnakeHeadPlayer!SnakeFoopSnakeHead subclass: #SnakeFoopSnakeHeadPlayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'SnakeFoop'!!SnakeFoopSnakeHeadPlayer commentStamp: 'WN 7/15/2010 19:28' prior: 0!This is the class for the human controlled snakesInstance Variables!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837039!addNewCpuSnake	"adds a new computer controled snake"	| newCpuSnake|	newCpuSnake_SnakeFoopSnakeHeadCpu new.	newCpuSnake color: self getRandomColor.	newCpuSnake position: self getRandomPosition.		snakes addLast:newCpuSnake.	gameBoardMorph addMorph: newCpuSnake.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:40' prior: 33837405!addPlayer2Snake	"adds a new snake for player 2"	player2Snake==nil ifTrue:[		player2Snake_SnakeFoopSnakeHeadPlayer new.		player2Snake color: self getRandomColor.		player2Snake position: self getRandomPosition.			snakes addLast:player2Snake.		gameBoardMorph addMorph: player2Snake.	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:35'!cleanElement:element	"cleans the element from all variables where it may be used"	player1Snake == element ifTrue:[player1Snake_nil.].	player2Snake == element ifTrue:[player2Snake_nil.].								element abandon.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:58' prior: 33897851!eatsSnakeColor:colorSnake overOtherSnakeColor:colorOver	"checks if the color from the snake eats the color of the other snake over which it moves"	| returnColor |		colorSnake == Color red ifTrue:[		colorOver == Color blue ifTrue:[returnColor_Color red.].		colorOver == Color green ifTrue:[returnColor_Color green.].		].	colorSnake == Color blue ifTrue:[		colorOver == Color green ifTrue:[returnColor_Color blue].		colorOver == Color red ifTrue:[returnColor_Color red.].		].	colorSnake == Color green ifTrue:[		colorOver == Color red ifTrue:[returnColor_Color green].		colorOver == Color blue ifTrue:[returnColor_Color blue.].		].		^returnColor.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:10' prior: 33867845!generateControlPanel	"this method generates control panel which contains the buttons"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add Player 1';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer1Snake;			 target: self);			addMorphBack: AlignmentMorph newVariableTransparentSpacer;		addMorphBack: (SimpleButtonMorph new label: 'Add Player 2';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addPlayer2Snake;			 target: self);			 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Add new CPU';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #addNewCpuSnake;			 target: self);								 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (SimpleButtonMorph new label: 'Quit';			 color: Color lightGray;			 borderColor: #raised;			 borderWidth: 2;			 actionSelector: #delete;			 target: self)! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:22' prior: 33875768!generateDisplayArea	"this method generates the display area where the border mode display is shown"		^ AlignmentMorph newRow color: Color lightGray;		 borderWidth: 0;		 layoutInset: 3;		 vResizing: #shrinkWrap;		 wrapCentering: #center;		 addMorphBack: AlignmentMorph newVariableTransparentSpacer;		 addMorphBack: (StringMorph contents: 'Border Modus: ');		 addMorphBack: (borderModeMorph_StringMorph contents: '-').		! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 09:11' prior: 33869995!generateGameArea	"this method generates the game area"		gameBoardMorph _ Morph new.	gameBoardMorph borderWidth: 0.	gameBoardMorph extent: (gameBoardSize @ gameBoardSize).	gameBoardMorph color:Color darkGray.		^gameBoardMorph! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:39' prior: 33839417!getRandomColor	"returns a random color from the available color pool"	^availableColors atWrap:(1 to: (availableColors size)) atRandom.! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 08:45' prior: 33847986!getRandomPosition	"returns a random position determined by the boardsize"	| positionX positionY |	positionX _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position x).	positionY _ ((((1 to: ((gameBoardSize/10)-1)) atRandom)*10) + gameBoardMorph position y).			^Point new setX:positionX setY:positionY! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:55' prior: 33840256!handlesKeyboard: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 06:54' prior: 33840382!handlesMouseOver: evt	^ true! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:36' prior: 33894649!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:13' prior: 33841173!keyStroke: evt	"adds the keyboard handling"	| keyValue |	keyValue _ evt keyCharacter asciiValue.	"this are the keys for player 1"	player1Snake==nil ifFalse:[		keyValue = 30 ifTrue: [ player1Snake changeDirectionUp. ].		keyValue = 31 ifTrue: [ player1Snake changeDirectionDown. ].		keyValue = 28 ifTrue: [ player1Snake changeDirectionLeft. ].		keyValue = 29 ifTrue: [ player1Snake changeDirectionRight. ].	].	"this are the keys for player 2"	player2Snake==nil ifFalse:[		keyValue = 119 ifTrue: [ player2Snake changeDirectionUp. ].		keyValue = 115 ifTrue: [ player2Snake changeDirectionDown. ].		keyValue = 97 ifTrue: [ player2Snake changeDirectionLeft. ].		keyValue = 100 ifTrue: [ player2Snake changeDirectionRight. ].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:34' prior: 33842011!mouseEnter: evt	"sets the keyboard focus to this panel (if the mouse clicks on the window)"	evt hand newKeyboardFocus: self! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 08:45' prior: 33848401!addPlayer1Snake	"adds a new snake for player 1"	player1Snake==nil ifTrue:[		player1Snake_SnakeFoopSnakeHeadPlayer new.		player1Snake color: self getRandomColor.		player1Snake position: self getRandomPosition.			snakes addLast:player1Snake.		gameBoardMorph addMorph: player1Snake.	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:38' prior: 33940776!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 07:33' prior: 33843309!stepTime	"sets the time between the steps"	^ 100! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:50' prior: 33929726!addElement:newSnakeElement	"adds another element to the end of the Snake"	nextElement==nil ifTrue:[		newSnakeElement position:(self position).		nextElement_newSnakeElement.		] ifFalse:[			nextElement addElement:newSnakeElement.		]! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:11'!initialize	super initialize.	self extent: 10 @ 10.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 12:28' prior: 33935598!move:newPosition	"moves the element to the given position"	| temp |	temp_ (self position).	self position: newPosition.	nextElement==nil ifFalse:[		nextElement move:temp.].! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843744!nextElement	"returns the next element of this element"	^nextElement! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 05:40' prior: 33843920!nextElement:newNextElement	"sets the next element of the current element"	nextElement_newNextElement.! !!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 11:31'!reduceSize	"reduces the size of the snake by one"	nextElement==nil ifFalse:[			nextElement reduceSize.		] ifTrue: [			self abandon.		].! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 12:57' prior: 33844117!initialize	super initialize.	speed_ Point new setX:0 setY:0.	! !!SnakeFoopSnakeHead methodsFor: '-- all --' stamp: 'WN 7/15/2010 05:46' prior: 33844317!speed	^speed! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33844433!changeDirectionDown	"changes the direction to move the snake downwards"	speed setX:0 setY:10.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844632!changeDirectionLeft	"changes the direction to move the snake left"	speed setX:-10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:00' prior: 33844827!changeDirectionRight	"changes the direction to move the snake right"	speed setX:10 setY:0.! !!SnakeFoopSnakeHead methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 07:12' prior: 33845023!changeDirectionUp	"changes the direction to move the snake upwards"	speed setX:0 setY:-10.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 13:13'!initialize	super initialize.	self startStepping.! !!SnakeFoopSnakeHeadCpu methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:27' prior: 33845222!step	"randomly changes the direction for the cpu snake"	| temp |		temp_ (1 to: 4) atRandom.		temp==1 ifTrue:[self changeDirectionUp.].	temp==2 ifTrue:[self changeDirectionDown.].	temp==3 ifTrue:[self changeDirectionLeft.].	temp==4 ifTrue:[self changeDirectionRight.].! !!SnakeFoopSnakeHeadCpu methodsFor: '-- all --' stamp: 'WN 7/15/2010 06:35' prior: 33845585!stepTime	^ 300! !SnakeFoopSnakeHeadPlayer removeSelector: #handlesKeyboard:!SnakeFoopSnakeHeadPlayer removeSelector: #handlesMouseOver:!SnakeFoopSnakeHeadPlayer removeSelector: #keyStroke:!SnakeFoopSnakeHeadPlayer removeSelector: #mouseEnter:!SnakeFoopSnakeHeadPlayer removeSelector: #speed!SnakeFoopSnakeHeadPlayer removeSelector: #stepTime!SnakeFoopSnakeHeadCpu removeSelector: #speed!SnakeFoopSnakeHead removeSelector: #handlesKeyboard:!SnakeFoopSnakeHead removeSelector: #keyStroke:!SnakeFoopSnakeHead removeSelector: #lastElement!SnakeFoopSnakeHead removeSelector: #lastElement:!SnakeFoopSnakeElement removeSelector: #atSamePosition:!SnakeFoopSnakeElement removeSelector: #getColor!SnakeFoopSnakeElement removeSelector: #getCoordinates!SnakeFoopSnakeElement removeSelector: #getNextElement!SnakeFoopSnakeElement removeSelector: #getPositionX!SnakeFoopSnakeElement removeSelector: #getPositionY!SnakeFoopSnakeElement removeSelector: #setColor:!SnakeFoopSnakeElement removeSelector: #setCoordinates:!SnakeFoopSnakeElement removeSelector: #setNextElement:!SnakeFoopSnakeElement removeSelector: #setPositionX:!SnakeFoopSnakeElement removeSelector: #setPositionX:andPositionY:!SnakeFoopSnakeElement removeSelector: #setPositionY:!SnakeFoopGame removeSelector: #descriptionForPartsBin!SnakeFoopGame removeSelector: #getRandomPositionWithin!SnakeFoopGame removeSelector: #initializeToStandAlone!Smalltalk removeClassNamed: #SnakeFoopRandomColor!----End fileIn of a stream----!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:40' prior: 34042542!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:41' prior: 34049278!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:43' prior: 34051324!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				] ifFalse:[				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].] ifFalse:[				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].]ifFalse:[				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:45' prior: 34053370!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).					] ifFalse:[					gameBoardMorph left >= newPosition x ifTrue:[						newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).					] ifFalse:[					gameBoardMorph right <= newPosition x ifTrue:[						newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).					].				].].].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:45' prior: 34055415!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				] ifFalse:[					gameBoardMorph top <= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).					] ifFalse:[					gameBoardMorph left >= newPosition x ifTrue:[						newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).					] ifFalse:[					gameBoardMorph right <= newPosition x ifTrue:[						newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).					].				].].].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:47' prior: 34057508!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:48' prior: 34059601!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:48' prior: 34061647!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top < newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:49' prior: 34063693!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top < newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:50' prior: 34065738!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:51' prior: 34067875!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:51' prior: 34070013!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph bottom,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:51' prior: 34072151!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph bottom,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:53' prior: 34074259!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph bottom,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:53' prior: 34076400!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph bottom,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:54' prior: 34078541!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph bottom,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left = newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:55' prior: 34040236!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'stop'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:55' prior: 34080715!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph bottom,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left = newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:56' prior: 34083727!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph bottom,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left = newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 19:56' prior: 34082862!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:57' prior: 34085829!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left = newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:58' prior: 34088808!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom = newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left = newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:59' prior: 34091036!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph left = newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 19:59' prior: 34093265!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph left = newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:06' prior: 34095462!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right = newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:07' prior: 34097725!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				].				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:11' prior: 34099956!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[				gameBoardMorph top >= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).				].].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:12' prior: 34102287!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.]		ifFalse:[			currentBorderMode='wrap' ifTrue:[				Transcript show:'top: ', gameBoardMorph top,'bottom: ', gameBoardMorph bottom,'left ', gameBoardMorph left,'right ', gameBoardMorph right,' newpos: ',newPosition.				Transcript cr.				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:13' prior: 34104530!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp move:newPosition.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 21:13' prior: 34106748!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp reduceSize.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 21:13' prior: 34087943!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'poison'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:14' prior: 34108776!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				temp reduceSize.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 21:14' prior: 34045852!reduceSize	"reduces the size of the snake by one"	nextElement==nil ifFalse:[ 			nextElement reduceSize.		] ifTrue: [ 			self abandon.		].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 21:15' prior: 34111681!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode=='poison' ifTrue:[				Transcript show:'gift'.				temp reduceSize.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:16' prior: 34114019!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode='poison' ifTrue:[				Transcript show:'gift'.				temp reduceSize.].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopSnakeElement methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 21:17' prior: 34113760!reduceSize	"reduces the size of the snake by one"	nextElement==nil ifFalse:[ 			^(nextElement reduceSize).		] ifTrue: [ 			self abandon.			^self		].! !!SnakeFoopGame methodsFor: 'nil' stamp: 'WN 7/15/2010 21:17' prior: 34116141!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode='poison' ifTrue:[				Transcript show:'gift'.				self cleanElement:(temp reduceSize).].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:18' prior: 34118485!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode='poison' ifTrue:[				self cleanElement:(temp reduceSize).].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			"self addNewCpuSnake."		].	].! !!SnakeFoopGame methodsFor: 'as yet unclassified' stamp: 'WN 7/15/2010 21:18' prior: 34110814!initialize	"sets up a new snake game and initializes the gameboard & the status area"	super initialize.	snakes_OrderedCollection new.	gameBoardSize _ 300.		currentBorderMode_'wrap'.		availableBorderModes_Array new:3.	availableBorderModes at:1 put:'stop'.	availableBorderModes at:2 put:'wrap'.	availableBorderModes at:3 put:'poison'.		availableColors_Array new:3.	availableColors at:1 put:Color red.	availableColors at:2 put:Color blue.	availableColors at:3 put:Color green.		self color: Color lightGray;		 borderWidth: 0;		 hResizing: #shrinkWrap;		 vResizing: #shrinkWrap;		 listDirection: #topToBottom;		 addMorphBack: self generateGameArea;		 addMorphBack: self generateDisplayArea;		 addMorphBack: self generateControlPanel.			self startStepping! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:18' prior: 34120593!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					currentBorderMode='poison' ifTrue:[				self cleanElement:(temp reduceSize).].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !SnakeFoopGame new openInWorld.!!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:19' prior: 34123515!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				"check for border violations and handle them"		(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			"wrap mode"			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].						"poison mode"			currentBorderMode='poison' ifTrue:[				self cleanElement:(temp reduceSize).].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !!SnakeFoopGame methodsFor: '-- all --' stamp: 'WN 7/15/2010 21:19' prior: 34125593!step	"moves snakes, generates new snakes and checks for possible consumings"	| temp newPosition newElement |			"refreshes the bordermode display"	borderModeMorph contents:currentBorderMode.	"moves all registered snakes and handels border violations"	1 to: snakes size do:[:index |		temp _ (snakes at: index).		newPosition_temp position + temp speed.				"check for border violations and handle them"		(gameBoardMorph bounds containsRect:(temp bounds translateBy: temp speed )) 		ifTrue:[temp move:newPosition.			] ifFalse:[			"wrap mode"			currentBorderMode='wrap' ifTrue:[				gameBoardMorph bottom <= newPosition y ifTrue:[					newPosition setX:(newPosition x) setY:(newPosition y - gameBoardSize).				] ifFalse:[					gameBoardMorph top >= newPosition y ifTrue:[						newPosition setX:(newPosition x) setY:(newPosition y + gameBoardSize).					].				].				gameBoardMorph left >= newPosition x ifTrue:[					newPosition setX:(newPosition x + gameBoardSize) setY:(newPosition y).				].				gameBoardMorph right <= newPosition x ifTrue:[					newPosition setX:(newPosition x - gameBoardSize) setY:(newPosition y).				].				temp move:newPosition.			].					"poison mode"			currentBorderMode='poison' ifTrue:[				self cleanElement:(temp reduceSize).].			].			gameBoardMorph submorphsDo:[:m |				((m isKindOf: SnakeFoopSnakeElement) and: [temp bounds intersects: m bounds]) ifTrue:[					(m==temp) ifFalse:[						(temp color) = (self eatsSnakeColor:(temp color) overOtherSnakeColor:(m color)) ifTrue:[							self cleanElement:m.							newElement _ SnakeFoopSnakeElement new.							newElement color:(temp color).							gameBoardMorph addMorph:newElement.							temp addElement:newElement.						]						ifFalse:[							temp color:(m color).							]					].					].			].	].		"generate a new cpu snake. there is a 1/10 chance to generate a new cpu snake but only if there are less then 11"	snakes size < 11 ifTrue:[		temp _ (1 to: 10) atRandom.		1 == temp ifTrue:[			self addNewCpuSnake.		].	].! !----QUIT----{15 July 2010 . 9:19:58 pm} Squeak4.1.image priorSource: 387820!