MessageNotUnderstood: Person>>forename12 July 2010 4:53:19.527 pmVM: Mac OS - SmalltalkImage: Squeak4.1 [latest update: #9957]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir /Users/werner/Documents/ed/repos/foopp/foop/ass3Trusted Dir /foobar/tooBar/forSqueak/bogus/Untrusted Dir /foobar/tooBar/forSqueak/bogus/Person(Object)>>doesNotUnderstand: #forename	Receiver: a Person	Arguments and temporary variables: 		aMessage: 	forename		exception: 	MessageNotUnderstood: Person>>forename		resumeValue: 	nil	Receiver's instance variables: 		forename: 	'Werner'		surename: 	'Nemecek'		age: 	nilPerson>>getName	Receiver: a Person	Arguments and temporary variables: 		returnString: 	nil	Receiver's instance variables: 		forename: 	'Werner'		surename: 	'Nemecek'		age: 	nilUndefinedObject>>DoIt	Receiver: nil	Arguments and temporary variables: 	Receiver's instance variables: nilCompiler>>evaluate:in:to:notifying:ifFail:logged:	Receiver: a Compiler	Arguments and temporary variables: 		textOrStream: 	a ReadWriteStream 'tempPerson_Person new.tempPerson sayHello:''h...etc...		aContext: 	nil		receiver: 	nil		aRequestor: 	a SmalltalkEditor		failBlock: 	[closure] in [] in SmalltalkEditor(TextEditor)>>evaluateSelection		logFlag: 	true		methodNode: 	DoIt	tempPerson := Person new.	tempPerson sayHello: 'huch'.	temp...etc...		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(745)")		value: 	nil		toLog: 	nil		itsSelection: 	nil		itsSelectionString: 	nil	Receiver's instance variables: 		sourceStream: 	a ReadWriteStream 'tempPerson_Person new.tempPerson sayHello:''h...etc...		requestor: 	a SmalltalkEditor		class: 	UndefinedObject		category: 	nil		context: 	nil		parser: 	a Parser--- The full stack ---Person(Object)>>doesNotUnderstand: #forenamePerson>>getNameUndefinedObject>>DoItCompiler>>evaluate:in:to:notifying:ifFail:logged: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -[] in SmalltalkEditor(TextEditor)>>evaluateSelectionBlockClosure>>on:do:SmalltalkEditor(TextEditor)>>evaluateSelectionSmalltalkEditor(TextEditor)>>doItSmalltalkEditor(TextEditor)>>doIt:SmalltalkEditor(TextEditor)>>dispatchOnCharacter:with:SmalltalkEditor(TextEditor)>>readKeyboard[] in TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView(TextMorph)>>handleInteraction:fromEvent:TextMorphForEditView>>handleInteraction:fromEvent:TextMorphForEditView(TextMorph)>>keyStroke:TextMorphForEditView>>keyStroke:TextMorphForEditView(TextMorph)>>handleKeystroke:KeyboardEvent>>sentTo:TextMorphForEditView(Morph)>>handleEvent:TextMorphForEditView(Morph)>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:[] in PasteUpMorph>>becomeActiveDuring:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendKeyboardEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in Project class>>spawnNewProcess[] in BlockClosure>>newProcess